package com.hurlant.crypto.tls
{
   public class TLSError extends Error
   {
      
      public static const close_notify:uint = 0;
      
      public static const unexpected_message:uint = 10;
      
      public static const bad_record_mac:uint = 20;
      
      public static const decryption_failed:uint = 21;
      
      public static const record_overflow:uint = 22;
      
      public static const decompression_failure:uint = 30;
      
      public static const handshake_failure:uint = 40;
      
      public static const bad_certificate:uint = 42;
      
      public static const unsupported_certificate:uint = 43;
      
      public static const certificate_revoked:uint = 44;
      
      public static const certificate_expired:uint = 45;
      
      public static const certificate_unknown:uint = 46;
      
      public static const illegal_parameter:uint = 47;
      
      public static const unknown_ca:uint = 48;
      
      public static const access_denied:uint = 49;
      
      public static const decode_error:uint = 50;
      
      public static const decrypt_error:uint = 51;
      
      public static const protocol_version:uint = 70;
      
      public static const insufficient_security:uint = 71;
      
      public static const internal_error:uint = 80;
      
      public static const user_canceled:uint = 90;
      
      public static const no_renegotiation:uint = 100;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PackageNamespace(""),"close_notify")
         pushbyte 0
         initproperty Qname(PackageNamespace(""),"close_notify")
         findproperty Qname(PackageNamespace(""),"unexpected_message")
         pushbyte 10
         initproperty Qname(PackageNamespace(""),"unexpected_message")
         findproperty Qname(PackageNamespace(""),"bad_record_mac")
         pushbyte 20
         initproperty Qname(PackageNamespace(""),"bad_record_mac")
         findproperty Qname(PackageNamespace(""),"decryption_failed")
         pushbyte 21
         initproperty Qname(PackageNamespace(""),"decryption_failed")
         findproperty Qname(PackageNamespace(""),"record_overflow")
         pushbyte 22
         initproperty Qname(PackageNamespace(""),"record_overflow")
         findproperty Qname(PackageNamespace(""),"decompression_failure")
         pushbyte 30
         initproperty Qname(PackageNamespace(""),"decompression_failure")
         findproperty Qname(PackageNamespace(""),"handshake_failure")
         pushbyte 40
         initproperty Qname(PackageNamespace(""),"handshake_failure")
         findproperty Qname(PackageNamespace(""),"bad_certificate")
         pushbyte 42
         initproperty Qname(PackageNamespace(""),"bad_certificate")
         findproperty Qname(PackageNamespace(""),"unsupported_certificate")
         pushbyte 43
         initproperty Qname(PackageNamespace(""),"unsupported_certificate")
         findproperty Qname(PackageNamespace(""),"certificate_revoked")
         pushbyte 44
         initproperty Qname(PackageNamespace(""),"certificate_revoked")
         findproperty Qname(PackageNamespace(""),"certificate_expired")
         pushbyte 45
         initproperty Qname(PackageNamespace(""),"certificate_expired")
         findproperty Qname(PackageNamespace(""),"certificate_unknown")
         pushbyte 46
         initproperty Qname(PackageNamespace(""),"certificate_unknown")
         findproperty Qname(PackageNamespace(""),"illegal_parameter")
         pushbyte 47
         initproperty Qname(PackageNamespace(""),"illegal_parameter")
         findproperty Qname(PackageNamespace(""),"unknown_ca")
         pushbyte 48
         initproperty Qname(PackageNamespace(""),"unknown_ca")
         findproperty Qname(PackageNamespace(""),"access_denied")
         pushbyte 49
         initproperty Qname(PackageNamespace(""),"access_denied")
         findproperty Qname(PackageNamespace(""),"decode_error")
         pushbyte 50
         initproperty Qname(PackageNamespace(""),"decode_error")
         findproperty Qname(PackageNamespace(""),"decrypt_error")
         pushbyte 51
         initproperty Qname(PackageNamespace(""),"decrypt_error")
         findproperty Qname(PackageNamespace(""),"protocol_version")
         pushbyte 70
         initproperty Qname(PackageNamespace(""),"protocol_version")
         findproperty Qname(PackageNamespace(""),"insufficient_security")
         pushbyte 71
         initproperty Qname(PackageNamespace(""),"insufficient_security")
         findproperty Qname(PackageNamespace(""),"internal_error")
         pushbyte 80
         initproperty Qname(PackageNamespace(""),"internal_error")
         findproperty Qname(PackageNamespace(""),"user_canceled")
         pushbyte 90
         initproperty Qname(PackageNamespace(""),"user_canceled")
         findproperty Qname(PackageNamespace(""),"no_renegotiation")
         pushbyte 100
         initproperty Qname(PackageNamespace(""),"no_renegotiation")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function TLSError(param1:String, param2:int)
      {
         method
         name null
         param Qname(PackageNamespace(""),"String")
         param Qname(PackageNamespace(""),"int")
         returns null
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         getlocal_2
         constructsuper 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
