package com.company.ui
{
   import flash.events.Event;
   import flash.text.Font;
   import flash.text.TextField;
   import flash.text.TextFieldType;
   import flash.text.TextFormat;
   import flash.text.TextLineMetrics;
   
   public class BaseSimpleText extends TextField
   {
      
      public static const MyriadPro:Class;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PackageNamespace(""),"MyriadPro")
         getlex Qname(PackageNamespace("com.company.ui"),"BaseSimpleText_MyriadPro")
         initproperty Qname(PackageNamespace(""),"MyriadPro")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var inputWidth_:int;
      
      public var inputHeight_:int;
      
      public var actualWidth_:int;
      
      public var actualHeight_:int;
      
      public function BaseSimpleText(param1:int, param2:uint, param3:Boolean = false, param4:int = 0, param5:int = 0)
      {
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"uint")
         param Qname(PackageNamespace(""),"Boolean")
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         optional false
         optional 0
         optional 0
         returns null
         
         body
         maxstack 3
         localcount 8
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal 4
         initproperty Qname(PackageNamespace(""),"inputWidth_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"inputWidth_")
         pushbyte 0
         ifeq ofs001d
         findproperty Qname(PackageNamespace(""),"width")
         getlocal 4
         initproperty Qname(PackageNamespace(""),"width")
         ofs001d:getlocal_0
         getlocal 5
         initproperty Qname(PackageNamespace(""),"inputHeight_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"inputHeight_")
         pushbyte 0
         ifeq ofs0035
         findproperty Qname(PackageNamespace(""),"height")
         getlocal 5
         initproperty Qname(PackageNamespace(""),"height")
         ofs0035:getlex Qname(PackageNamespace("flash.text"),"Font")
         getlex Qname(PackageNamespace(""),"MyriadPro")
         callpropvoid Qname(PackageNamespace(""),"registerFont") 1
         findpropstrict Qname(PackageNamespace(""),"MyriadPro")
         constructprop Qname(PackageNamespace(""),"MyriadPro") 0
         coerce Qname(PackageNamespace("flash.text"),"Font")
         setlocal 6
         getlocal_0
         getproperty Qname(PackageNamespace(""),"defaultTextFormat")
         coerce Qname(PackageNamespace("flash.text"),"TextFormat")
         dup
         setlocal 7
         getlocal 6
         getproperty Qname(PackageNamespace(""),"fontName")
         setproperty Qname(PackageNamespace(""),"font")
         getlocal 7
         pushfalse
         setproperty Qname(PackageNamespace(""),"bold")
         getlocal 7
         getlocal_1
         setproperty Qname(PackageNamespace(""),"size")
         getlocal 7
         getlocal_2
         setproperty Qname(PackageNamespace(""),"color")
         findproperty Qname(PackageNamespace(""),"defaultTextFormat")
         getlocal 7
         initproperty Qname(PackageNamespace(""),"defaultTextFormat")
         getlocal_3
         iffalse ofs00de
         findproperty Qname(PackageNamespace(""),"selectable")
         pushtrue
         initproperty Qname(PackageNamespace(""),"selectable")
         findproperty Qname(PackageNamespace(""),"mouseEnabled")
         pushtrue
         initproperty Qname(PackageNamespace(""),"mouseEnabled")
         findproperty Qname(PackageNamespace(""),"type")
         getlex Qname(PackageNamespace("flash.text"),"TextFieldType")
         getproperty Qname(PackageNamespace(""),"INPUT")
         initproperty Qname(PackageNamespace(""),"type")
         findproperty Qname(PackageNamespace(""),"embedFonts")
         pushtrue
         initproperty Qname(PackageNamespace(""),"embedFonts")
         findproperty Qname(PackageNamespace(""),"border")
         pushtrue
         initproperty Qname(PackageNamespace(""),"border")
         findproperty Qname(PackageNamespace(""),"borderColor")
         getlocal_2
         initproperty Qname(PackageNamespace(""),"borderColor")
         findpropstrict Qname(PackageNamespace(""),"setTextFormat")
         getlocal 7
         callpropvoid Qname(PackageNamespace(""),"setTextFormat") 1
         findpropstrict Qname(PackageNamespace(""),"addEventListener")
         getlex Qname(PackageNamespace("flash.events"),"Event")
         getproperty Qname(PackageNamespace(""),"CHANGE")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"128"),"onChange")
         callpropvoid Qname(PackageNamespace(""),"addEventListener") 2
         jump ofs00f0
         ofs00de:findproperty Qname(PackageNamespace(""),"selectable")
         pushfalse
         initproperty Qname(PackageNamespace(""),"selectable")
         findproperty Qname(PackageNamespace(""),"mouseEnabled")
         pushfalse
         initproperty Qname(PackageNamespace(""),"mouseEnabled")
         ofs00f0:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setFont(param1:String) : void
      {
         trait method Qname(PackageNamespace(""),"setFont")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"String")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlex Qname(PackageNamespace(""),"defaultTextFormat")
         coerce Qname(PackageNamespace("flash.text"),"TextFormat")
         setlocal_2
         getlocal_2
         getlocal_1
         setproperty Qname(PackageNamespace(""),"font")
         findproperty Qname(PackageNamespace(""),"defaultTextFormat")
         getlocal_2
         initproperty Qname(PackageNamespace(""),"defaultTextFormat")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setSize(param1:int) : void
      {
         trait method Qname(PackageNamespace(""),"setSize")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlex Qname(PackageNamespace(""),"defaultTextFormat")
         coerce Qname(PackageNamespace("flash.text"),"TextFormat")
         setlocal_2
         getlocal_2
         getlocal_1
         setproperty Qname(PackageNamespace(""),"size")
         getlocal_0
         getlocal_2
         callpropvoid Qname(PrivateNamespace(null,"128"),"applyFormat") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setColor(param1:uint) : void
      {
         trait method Qname(PackageNamespace(""),"setColor")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"uint")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlex Qname(PackageNamespace(""),"defaultTextFormat")
         coerce Qname(PackageNamespace("flash.text"),"TextFormat")
         setlocal_2
         getlocal_2
         getlocal_1
         setproperty Qname(PackageNamespace(""),"color")
         getlocal_0
         getlocal_2
         callpropvoid Qname(PrivateNamespace(null,"128"),"applyFormat") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setBold(param1:Boolean) : void
      {
         trait method Qname(PackageNamespace(""),"setBold")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Boolean")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlex Qname(PackageNamespace(""),"defaultTextFormat")
         coerce Qname(PackageNamespace("flash.text"),"TextFormat")
         setlocal_2
         getlocal_2
         getlocal_1
         setproperty Qname(PackageNamespace(""),"bold")
         getlocal_0
         getlocal_2
         callpropvoid Qname(PrivateNamespace(null,"128"),"applyFormat") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setAlignment(param1:String) : void
      {
         trait method Qname(PackageNamespace(""),"setAlignment")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"String")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlex Qname(PackageNamespace(""),"defaultTextFormat")
         coerce Qname(PackageNamespace("flash.text"),"TextFormat")
         setlocal_2
         getlocal_2
         getlocal_1
         setproperty Qname(PackageNamespace(""),"align")
         getlocal_0
         getlocal_2
         callpropvoid Qname(PrivateNamespace(null,"128"),"applyFormat") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setText(param1:String) : void
      {
         trait method Qname(PackageNamespace(""),"setText")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"String")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         setproperty Qname(PackageNamespace(""),"text")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setMultiLine(param1:Boolean) : void
      {
         trait method Qname(PackageNamespace(""),"setMultiLine")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Boolean")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PackageNamespace(""),"multiline")
         getlocal_1
         initproperty Qname(PackageNamespace(""),"multiline")
         findproperty Qname(PackageNamespace(""),"wordWrap")
         getlocal_1
         initproperty Qname(PackageNamespace(""),"wordWrap")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function applyFormat(param1:TextFormat) : void
      {
         trait method Qname(PrivateNamespace(null,"128"),"applyFormat")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("flash.text"),"TextFormat")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace(""),"setTextFormat")
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"setTextFormat") 1
         findproperty Qname(PackageNamespace(""),"defaultTextFormat")
         getlocal_1
         initproperty Qname(PackageNamespace(""),"defaultTextFormat")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function onChange(param1:Event) : void
      {
         trait method Qname(PrivateNamespace(null,"128"),"onChange")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("flash.events"),"Event")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         getlocal_0
         callpropvoid Qname(PackageNamespace(""),"updateMetrics") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function updateMetrics() : void
      {
         trait method Qname(PackageNamespace(""),"updateMetrics")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 5
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         pushnull
         coerce Qname(PackageNamespace("flash.text"),"TextLineMetrics")
         setlocal_2
         pushbyte 0
         setlocal_3
         pushbyte 0
         setlocal 4
         getlocal_0
         pushbyte 0
         initproperty Qname(PackageNamespace(""),"actualWidth_")
         getlocal_0
         pushbyte 0
         initproperty Qname(PackageNamespace(""),"actualHeight_")
         pushbyte 0
         setlocal_1
         jump ofs005e
         ofs0021:label
         findpropstrict Qname(PackageNamespace(""),"getLineMetrics")
         getlocal_1
         callproperty Qname(PackageNamespace(""),"getLineMetrics") 1
         coerce Qname(PackageNamespace("flash.text"),"TextLineMetrics")
         setlocal_2
         getlocal_2
         getproperty Qname(PackageNamespace(""),"width")
         pushbyte 4
         add
         convert_i
         setlocal_3
         getlocal_2
         getproperty Qname(PackageNamespace(""),"height")
         pushbyte 4
         add
         convert_i
         setlocal 4
         getlocal_3
         getlocal_0
         getproperty Qname(PackageNamespace(""),"actualWidth_")
         ifngt ofs0051
         getlocal_0
         getlocal_3
         initproperty Qname(PackageNamespace(""),"actualWidth_")
         ofs0051:getlocal_0
         getlocal_0
         getproperty Qname(PackageNamespace(""),"actualHeight_")
         getlocal 4
         add
         initproperty Qname(PackageNamespace(""),"actualHeight_")
         inclocal_i 1
         ofs005e:getlocal_1
         getlex Qname(PackageNamespace(""),"numLines")
         iflt ofs0021
         findproperty Qname(PackageNamespace(""),"width")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"inputWidth_")
         pushbyte 0
         ifne ofs007d
         getlocal_0
         getproperty Qname(PackageNamespace(""),"actualWidth_")
         convert_d
         jump ofs0082
         ofs007d:getlocal_0
         getproperty Qname(PackageNamespace(""),"inputWidth_")
         convert_d
         ofs0082:initproperty Qname(PackageNamespace(""),"width")
         findproperty Qname(PackageNamespace(""),"height")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"inputHeight_")
         pushbyte 0
         ifne ofs009b
         getlocal_0
         getproperty Qname(PackageNamespace(""),"actualHeight_")
         convert_d
         jump ofs00a0
         ofs009b:getlocal_0
         getproperty Qname(PackageNamespace(""),"inputHeight_")
         convert_d
         ofs00a0:initproperty Qname(PackageNamespace(""),"height")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function useTextDimensions() : void
      {
         trait method Qname(PackageNamespace(""),"useTextDimensions")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PackageNamespace(""),"width")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"inputWidth_")
         pushbyte 0
         ifne ofs001a
         getlex Qname(PackageNamespace(""),"textWidth")
         pushbyte 4
         add
         convert_d
         jump ofs001f
         ofs001a:getlocal_0
         getproperty Qname(PackageNamespace(""),"inputWidth_")
         convert_d
         ofs001f:initproperty Qname(PackageNamespace(""),"width")
         findproperty Qname(PackageNamespace(""),"height")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"inputHeight_")
         pushbyte 0
         ifne ofs003b
         getlex Qname(PackageNamespace(""),"textHeight")
         pushbyte 4
         add
         convert_d
         jump ofs0040
         ofs003b:getlocal_0
         getproperty Qname(PackageNamespace(""),"inputHeight_")
         convert_d
         ofs0040:initproperty Qname(PackageNamespace(""),"height")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
