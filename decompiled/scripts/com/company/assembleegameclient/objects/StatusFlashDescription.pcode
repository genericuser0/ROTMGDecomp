package com.company.assembleegameclient.objects
{
   import flash.display.BitmapData;
   import flash.geom.ColorTransform;
   import kabam.rotmg.stage3D.GraphicsFillExtra;
   
   public class StatusFlashDescription
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var startTime_:int;
      
      public var color_:uint;
      
      public var periodMS_:int;
      
      public var repeats_:int;
      
      public var duration_:int;
      
      public var percentDone:Number;
      
      public var curTime:Number;
      
      public var targetR:int;
      
      public var targetG:int;
      
      public var targetB:int;
      
      public function StatusFlashDescription(param1:int, param2:uint, param3:int)
      {
         method
         name null
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"uint")
         param Qname(PackageNamespace(""),"int")
         returns null
         
         body
         maxstack 3
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal_1
         initproperty Qname(PackageNamespace(""),"startTime_")
         getlocal_0
         getlocal_2
         initproperty Qname(PackageNamespace(""),"color_")
         getlocal_0
         getlocal_3
         pushshort 1000
         multiply
         initproperty Qname(PackageNamespace(""),"duration_")
         getlocal_0
         getlocal_2
         pushbyte 16
         rshift
         pushshort 255
         bitand
         initproperty Qname(PackageNamespace(""),"targetR")
         getlocal_0
         getlocal_2
         pushbyte 8
         rshift
         pushshort 255
         bitand
         initproperty Qname(PackageNamespace(""),"targetG")
         getlocal_0
         getlocal_2
         pushshort 255
         bitand
         initproperty Qname(PackageNamespace(""),"targetB")
         getlocal_0
         pushbyte 0
         initproperty Qname(PackageNamespace(""),"curTime")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function apply(param1:BitmapData, param2:int) : BitmapData
      {
         trait method Qname(PackageNamespace(""),"apply")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("flash.display"),"BitmapData")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace("flash.display"),"BitmapData")
         
         body
         maxstack 9
         localcount 8
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_1
         callproperty Qname(PackageNamespace(""),"clone") 0
         coerce Qname(PackageNamespace("flash.display"),"BitmapData")
         setlocal_3
         getlocal_2
         getlocal_0
         getproperty Qname(PackageNamespace(""),"startTime_")
         subtract
         getlocal_0
         getproperty Qname(PackageNamespace(""),"duration_")
         modulo
         convert_i
         setlocal 4
         getlex Qname(PackageNamespace(""),"Math")
         getlex Qname(PackageNamespace(""),"Math")
         getlocal 4
         getlocal_0
         getproperty Qname(PackageNamespace(""),"duration_")
         divide
         getlex Qname(PackageNamespace(""),"Math")
         getproperty Qname(PackageNamespace(""),"PI")
         multiply
         getlocal_0
         getproperty Qname(PackageNamespace(""),"percentDone")
         pushbyte 10
         multiply
         multiply
         callproperty Qname(PackageNamespace(""),"sin") 1
         callproperty Qname(PackageNamespace(""),"abs") 1
         convert_d
         dup
         setlocal 5
         pushdouble 0.5
         multiply
         convert_d
         setlocal 6
         findpropstrict Qname(PackageNamespace("flash.geom"),"ColorTransform")
         pushbyte 1
         getlocal 6
         subtract
         pushbyte 1
         getlocal 6
         subtract
         pushbyte 1
         getlocal 6
         subtract
         pushbyte 1
         getlocal 6
         getlocal_0
         getproperty Qname(PackageNamespace(""),"targetR")
         multiply
         getlocal 6
         getlocal_0
         getproperty Qname(PackageNamespace(""),"targetG")
         multiply
         getlocal 6
         getlocal_0
         getproperty Qname(PackageNamespace(""),"targetB")
         multiply
         pushbyte 0
         constructprop Qname(PackageNamespace("flash.geom"),"ColorTransform") 8
         coerce Qname(PackageNamespace("flash.geom"),"ColorTransform")
         setlocal 7
         getlocal_3
         getlocal_3
         getproperty Qname(PackageNamespace(""),"rect")
         getlocal 7
         callpropvoid Qname(PackageNamespace(""),"colorTransform") 2
         getlocal_3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function applyGPUTextureColorTransform(param1:BitmapData, param2:int) : void
      {
         trait method Qname(PackageNamespace(""),"applyGPUTextureColorTransform")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("flash.display"),"BitmapData")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 9
         localcount 7
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_2
         getlocal_0
         getproperty Qname(PackageNamespace(""),"startTime_")
         subtract
         getlocal_0
         getproperty Qname(PackageNamespace(""),"duration_")
         modulo
         convert_i
         setlocal_3
         getlex Qname(PackageNamespace(""),"Math")
         getlex Qname(PackageNamespace(""),"Math")
         getlocal_3
         getlocal_0
         getproperty Qname(PackageNamespace(""),"duration_")
         divide
         getlex Qname(PackageNamespace(""),"Math")
         getproperty Qname(PackageNamespace(""),"PI")
         multiply
         getlocal_0
         getproperty Qname(PackageNamespace(""),"percentDone")
         pushbyte 10
         multiply
         multiply
         callproperty Qname(PackageNamespace(""),"sin") 1
         callproperty Qname(PackageNamespace(""),"abs") 1
         convert_d
         dup
         setlocal 4
         pushdouble 0.5
         multiply
         convert_d
         setlocal 5
         findpropstrict Qname(PackageNamespace("flash.geom"),"ColorTransform")
         pushbyte 1
         getlocal 5
         subtract
         pushbyte 1
         getlocal 5
         subtract
         pushbyte 1
         getlocal 5
         subtract
         pushbyte 1
         getlocal 5
         getlocal_0
         getproperty Qname(PackageNamespace(""),"targetR")
         multiply
         getlocal 5
         getlocal_0
         getproperty Qname(PackageNamespace(""),"targetG")
         multiply
         getlocal 5
         getlocal_0
         getproperty Qname(PackageNamespace(""),"targetB")
         multiply
         pushbyte 0
         constructprop Qname(PackageNamespace("flash.geom"),"ColorTransform") 8
         coerce Qname(PackageNamespace("flash.geom"),"ColorTransform")
         setlocal 6
         getlex Qname(PackageNamespace("kabam.rotmg.stage3D"),"GraphicsFillExtra")
         getlocal_1
         getlocal 6
         callpropvoid Qname(PackageNamespace(""),"setColorTransform") 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function doneAt(param1:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"doneAt")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_0
         getproperty Qname(PackageNamespace(""),"curTime")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"duration_")
         divide
         initproperty Qname(PackageNamespace(""),"percentDone")
         getlocal_0
         getlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"startTime_")
         subtract
         initproperty Qname(PackageNamespace(""),"curTime")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"percentDone")
         pushbyte 1
         greaterthan
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
