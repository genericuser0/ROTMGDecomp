package com.company.assembleegameclient.objects.particles
{
   import flash.geom.Point;
   
   public class ThrowEffect extends ParticleEffect
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var start_:Point;
      
      public var end_:Point;
      
      public var color_:int;
      
      public var duration_:int;
      
      public function ThrowEffect(param1:Point, param2:Point, param3:int, param4:int = 1500)
      {
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace("flash.geom"),"Point")
         param Qname(PackageNamespace("flash.geom"),"Point")
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         optional 1500
         returns null
         
         body
         maxstack 2
         localcount 5
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal_1
         initproperty Qname(PackageNamespace(""),"start_")
         getlocal_0
         getlocal_2
         initproperty Qname(PackageNamespace(""),"end_")
         getlocal_0
         getlocal_3
         initproperty Qname(PackageNamespace(""),"color_")
         getlocal_0
         getlocal 4
         initproperty Qname(PackageNamespace(""),"duration_")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function runNormalRendering(param1:int, param2:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"runNormalRendering")
         flag OVERRIDE
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 6
         localcount 5
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PackageNamespace(""),"x_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"x")
         initproperty Qname(PackageNamespace(""),"x_")
         findproperty Qname(PackageNamespace(""),"y_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"y")
         initproperty Qname(PackageNamespace(""),"y_")
         pushshort 200
         setlocal_3
         findpropstrict Qname(PrivateNamespace(null,"1041"),"ThrowParticle")
         getlocal_3
         getlocal_0
         getproperty Qname(PackageNamespace(""),"color_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"duration_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"end_")
         constructprop Qname(PrivateNamespace(null,"1041"),"ThrowParticle") 5
         coerce Qname(PrivateNamespace(null,"1041"),"ThrowParticle")
         setlocal 4
         getlex Qname(PackageNamespace(""),"map_")
         getlocal 4
         getlex Qname(PackageNamespace(""),"x_")
         getlex Qname(PackageNamespace(""),"y_")
         callpropvoid Qname(PackageNamespace(""),"addObj") 3
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function runEasyRendering(param1:int, param2:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"runEasyRendering")
         flag OVERRIDE
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 6
         localcount 5
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PackageNamespace(""),"x_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"x")
         initproperty Qname(PackageNamespace(""),"x_")
         findproperty Qname(PackageNamespace(""),"y_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"y")
         initproperty Qname(PackageNamespace(""),"y_")
         pushbyte 10
         setlocal_3
         findpropstrict Qname(PrivateNamespace(null,"1041"),"ThrowParticle")
         getlocal_3
         getlocal_0
         getproperty Qname(PackageNamespace(""),"color_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"duration_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"end_")
         constructprop Qname(PrivateNamespace(null,"1041"),"ThrowParticle") 5
         coerce Qname(PrivateNamespace(null,"1041"),"ThrowParticle")
         setlocal 4
         getlex Qname(PackageNamespace(""),"map_")
         getlocal 4
         getlex Qname(PackageNamespace(""),"x_")
         getlex Qname(PackageNamespace(""),"y_")
         callpropvoid Qname(PackageNamespace(""),"addObj") 3
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}

import com.company.assembleegameclient.objects.particles.Particle;
import com.company.assembleegameclient.objects.particles.SparkParticle;
import com.company.assembleegameclient.util.RandomUtil;
import flash.geom.Point;

class ThrowParticle extends Particle
{
   
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal_0
      pushscope
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public var lifetime_:int;
   
   public var timeLeft_:int;
   
   public var initialSize_:int;
   
   public var start_:Point;
   
   public var end_:Point;
   
   public var dx_:Number;
   
   public var dy_:Number;
   
   public var pathX_:Number;
   
   public var pathY_:Number;
   
   function ThrowParticle(param1:int, param2:int, param3:int, param4:Point, param5:Point)
   {
      method
      name null
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace("flash.geom"),"Point")
      param Qname(PackageNamespace("flash.geom"),"Point")
      returns null
      
      body
      maxstack 4
      localcount 8
      initscopedepth 6
      maxscopedepth 7
      
      code
      getlocal_0
      pushscope
      getlocal_0
      getlocal_2
      pushbyte 0
      getlocal_1
      constructsuper 3
      getlocal_0
      getlocal_0
      getlocal_3
      dup
      setlocal 7
      initproperty Qname(PackageNamespace(""),"timeLeft_")
      getlocal 7
      kill 7
      initproperty Qname(PackageNamespace(""),"lifetime_")
      getlocal_0
      getlocal_1
      initproperty Qname(PackageNamespace(""),"initialSize_")
      getlocal_0
      getlocal 4
      initproperty Qname(PackageNamespace(""),"start_")
      getlocal_0
      getlocal 5
      initproperty Qname(PackageNamespace(""),"end_")
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"end_")
      getproperty Qname(PackageNamespace(""),"x")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"start_")
      getproperty Qname(PackageNamespace(""),"x")
      subtract
      getlocal_0
      getproperty Qname(PackageNamespace(""),"timeLeft_")
      divide
      initproperty Qname(PackageNamespace(""),"dx_")
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"end_")
      getproperty Qname(PackageNamespace(""),"y")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"start_")
      getproperty Qname(PackageNamespace(""),"y")
      subtract
      getlocal_0
      getproperty Qname(PackageNamespace(""),"timeLeft_")
      divide
      initproperty Qname(PackageNamespace(""),"dy_")
      getlex Qname(PackageNamespace("flash.geom"),"Point")
      getlocal 4
      getlocal 5
      callproperty Qname(PackageNamespace(""),"distance") 2
      getlocal_0
      getproperty Qname(PackageNamespace(""),"timeLeft_")
      divide
      convert_d
      setlocal 6
      getlocal_0
      findproperty Qname(PackageNamespace(""),"x_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"start_")
      getproperty Qname(PackageNamespace(""),"x")
      dup
      setlocal 7
      initproperty Qname(PackageNamespace(""),"x_")
      getlocal 7
      kill 7
      initproperty Qname(PackageNamespace(""),"pathX_")
      getlocal_0
      findproperty Qname(PackageNamespace(""),"y_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"start_")
      getproperty Qname(PackageNamespace(""),"y")
      dup
      setlocal 7
      initproperty Qname(PackageNamespace(""),"y_")
      getlocal 7
      kill 7
      initproperty Qname(PackageNamespace(""),"pathY_")
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   override public function update(param1:int, param2:int) : Boolean
   {
      trait method Qname(PackageNamespace(""),"update")
      flag OVERRIDE
      dispid 0
      method
      name null
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"int")
      returns Qname(PackageNamespace(""),"Boolean")
      
      body
      maxstack 9
      localcount 3
      initscopedepth 6
      maxscopedepth 7
      
      code
      getlocal_0
      pushscope
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"timeLeft_")
      getlocal_2
      subtract
      initproperty Qname(PackageNamespace(""),"timeLeft_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"timeLeft_")
      pushbyte 0
      ifnle ofs0018
      pushfalse
      returnvalue
      ofs0018:findproperty Qname(PackageNamespace(""),"z_")
      getlex Qname(PackageNamespace(""),"Math")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"timeLeft_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"lifetime_")
      divide
      getlex Qname(PackageNamespace(""),"Math")
      getproperty Qname(PackageNamespace(""),"PI")
      multiply
      callproperty Qname(PackageNamespace(""),"sin") 1
      pushbyte 2
      multiply
      initproperty Qname(PackageNamespace(""),"z_")
      findpropstrict Qname(PackageNamespace(""),"setSize")
      pushbyte 0
      callpropvoid Qname(PackageNamespace(""),"setSize") 1
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"pathX_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"dx_")
      getlocal_2
      multiply
      add
      initproperty Qname(PackageNamespace(""),"pathX_")
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"pathY_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"dy_")
      getlocal_2
      multiply
      add
      initproperty Qname(PackageNamespace(""),"pathY_")
      findpropstrict Qname(PackageNamespace(""),"moveTo")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"pathX_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"pathY_")
      callpropvoid Qname(PackageNamespace(""),"moveTo") 2
      getlex Qname(PackageNamespace(""),"map_")
      findpropstrict Qname(PackageNamespace("com.company.assembleegameclient.objects.particles"),"SparkParticle")
      pushbyte 100
      getlex Qname(PackageNamespace(""),"z_")
      pushbyte 1
      add
      multiply
      getlex Qname(PackageNamespace(""),"color_")
      pushshort 400
      getlex Qname(PackageNamespace(""),"z_")
      getlex Qname(PackageNamespace("com.company.assembleegameclient.util"),"RandomUtil")
      pushbyte 1
      callproperty Qname(PackageNamespace(""),"plusMinus") 1
      getlex Qname(PackageNamespace("com.company.assembleegameclient.util"),"RandomUtil")
      pushbyte 1
      callproperty Qname(PackageNamespace(""),"plusMinus") 1
      constructprop Qname(PackageNamespace("com.company.assembleegameclient.objects.particles"),"SparkParticle") 6
      getlocal_0
      getproperty Qname(PackageNamespace(""),"pathX_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"pathY_")
      callpropvoid Qname(PackageNamespace(""),"addObj") 3
      pushtrue
      returnvalue
      end ; code
      end ; body
      end ; method
   }
}
