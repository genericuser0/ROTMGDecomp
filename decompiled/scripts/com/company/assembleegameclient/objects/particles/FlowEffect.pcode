package com.company.assembleegameclient.objects.particles
{
   import com.company.assembleegameclient.objects.GameObject;
   import flash.geom.Point;
   import kabam.rotmg.messaging.impl.data.WorldPosData;
   
   public class FlowEffect extends ParticleEffect
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var start_:Point;
      
      public var go_:GameObject;
      
      public var color_:int;
      
      public function FlowEffect(param1:WorldPosData, param2:GameObject, param3:int)
      {
         method
         name null
         param Qname(PackageNamespace("kabam.rotmg.messaging.impl.data"),"WorldPosData")
         param Qname(PackageNamespace("com.company.assembleegameclient.objects"),"GameObject")
         param Qname(PackageNamespace(""),"int")
         returns null
         
         body
         maxstack 4
         localcount 4
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         findpropstrict Qname(PackageNamespace("flash.geom"),"Point")
         getlocal_1
         getproperty Qname(PackageNamespace(""),"x_")
         getlocal_1
         getproperty Qname(PackageNamespace(""),"y_")
         constructprop Qname(PackageNamespace("flash.geom"),"Point") 2
         initproperty Qname(PackageNamespace(""),"start_")
         getlocal_0
         getlocal_2
         initproperty Qname(PackageNamespace(""),"go_")
         getlocal_0
         getlocal_3
         initproperty Qname(PackageNamespace(""),"color_")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function runNormalRendering(param1:int, param2:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"runNormalRendering")
         flag OVERRIDE
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 6
         localcount 7
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal_0
         pushscope
         pushbyte 0
         setlocal 5
         pushnull
         coerce Qname(PackageNamespace("com.company.assembleegameclient.objects.particles"),"Particle")
         setlocal 6
         getlex Qname(PrivateNamespace(null,"1040"),"FlowParticle")
         getproperty Qname(PackageNamespace(""),"total_")
         pushshort 200
         ifngt ofs001c
         pushfalse
         returnvalue
         ofs001c:findproperty Qname(PackageNamespace(""),"x_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"x")
         initproperty Qname(PackageNamespace(""),"x_")
         findproperty Qname(PackageNamespace(""),"y_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"y")
         initproperty Qname(PackageNamespace(""),"y_")
         pushbyte 5
         setlocal_3
         pushbyte 0
         setlocal 4
         jump ofs0088
         ofs0041:label
         pushbyte 3
         findpropstrict Qname(PackageNamespace(""),"int")
         getlex Qname(PackageNamespace(""),"Math")
         callproperty Qname(PackageNamespace(""),"random") 0
         pushbyte 5
         multiply
         callproperty Qname(PackageNamespace(""),"int") 1
         add
         pushbyte 20
         multiply
         convert_i
         setlocal 5
         findpropstrict Qname(PrivateNamespace(null,"1040"),"FlowParticle")
         pushdouble 0.5
         getlocal 5
         getlocal_0
         getproperty Qname(PackageNamespace(""),"color_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"go_")
         constructprop Qname(PrivateNamespace(null,"1040"),"FlowParticle") 5
         coerce Qname(PackageNamespace("com.company.assembleegameclient.objects.particles"),"Particle")
         setlocal 6
         getlex Qname(PackageNamespace(""),"map_")
         getlocal 6
         getlex Qname(PackageNamespace(""),"x_")
         getlex Qname(PackageNamespace(""),"y_")
         callpropvoid Qname(PackageNamespace(""),"addObj") 3
         inclocal_i 4
         ofs0088:getlocal 4
         getlocal_3
         iflt ofs0041
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function runEasyRendering(param1:int, param2:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"runEasyRendering")
         flag OVERRIDE
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 6
         localcount 7
         initscopedepth 7
         maxscopedepth 8
         
         code
         getlocal_0
         pushscope
         pushbyte 0
         setlocal 5
         pushnull
         coerce Qname(PackageNamespace("com.company.assembleegameclient.objects.particles"),"Particle")
         setlocal 6
         getlex Qname(PrivateNamespace(null,"1040"),"FlowParticle")
         getproperty Qname(PackageNamespace(""),"total_")
         pushshort 200
         ifngt ofs001c
         pushfalse
         returnvalue
         ofs001c:findproperty Qname(PackageNamespace(""),"x_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"x")
         initproperty Qname(PackageNamespace(""),"x_")
         findproperty Qname(PackageNamespace(""),"y_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getproperty Qname(PackageNamespace(""),"y")
         initproperty Qname(PackageNamespace(""),"y_")
         pushbyte 3
         setlocal_3
         pushbyte 0
         setlocal 4
         jump ofs0088
         ofs0041:label
         pushbyte 3
         findpropstrict Qname(PackageNamespace(""),"int")
         getlex Qname(PackageNamespace(""),"Math")
         callproperty Qname(PackageNamespace(""),"random") 0
         pushbyte 5
         multiply
         callproperty Qname(PackageNamespace(""),"int") 1
         add
         pushbyte 10
         multiply
         convert_i
         setlocal 5
         findpropstrict Qname(PrivateNamespace(null,"1040"),"FlowParticle")
         pushdouble 0.5
         getlocal 5
         getlocal_0
         getproperty Qname(PackageNamespace(""),"color_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"start_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"go_")
         constructprop Qname(PrivateNamespace(null,"1040"),"FlowParticle") 5
         coerce Qname(PackageNamespace("com.company.assembleegameclient.objects.particles"),"Particle")
         setlocal 6
         getlex Qname(PackageNamespace(""),"map_")
         getlocal 6
         getlex Qname(PackageNamespace(""),"x_")
         getlex Qname(PackageNamespace(""),"y_")
         callpropvoid Qname(PackageNamespace(""),"addObj") 3
         inclocal_i 4
         ofs0088:getlocal 4
         getlocal_3
         iflt ofs0041
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}

import com.company.assembleegameclient.objects.GameObject;
import com.company.assembleegameclient.objects.particles.Particle;
import flash.geom.Point;

class FlowParticle extends Particle
{
   
   public static var total_:int = 0;
   
   {
      method
      name null
      returns null
      
      body
      maxstack 2
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal_0
      pushscope
      findproperty Qname(PackageNamespace(""),"total_")
      pushbyte 0
      setproperty Qname(PackageNamespace(""),"total_")
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public var start_:Point;
   
   public var go_:GameObject;
   
   public var maxDist_:Number;
   
   public var flowSpeed_:Number;
   
   function FlowParticle(param1:Number, param2:int, param3:int, param4:Point, param5:GameObject)
   {
      method
      name null
      param Qname(PackageNamespace(""),"Number")
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace("flash.geom"),"Point")
      param Qname(PackageNamespace("com.company.assembleegameclient.objects"),"GameObject")
      returns null
      
      body
      maxstack 4
      localcount 10
      initscopedepth 6
      maxscopedepth 7
      
      code
      getlocal_0
      pushscope
      getlocal_0
      getlocal_3
      getlocal_1
      getlocal_2
      constructsuper 3
      getlocal_0
      getlocal 4
      initproperty Qname(PackageNamespace(""),"start_")
      getlocal_0
      getlocal 5
      initproperty Qname(PackageNamespace(""),"go_")
      findpropstrict Qname(PackageNamespace("flash.geom"),"Point")
      getlex Qname(PackageNamespace(""),"x_")
      getlex Qname(PackageNamespace(""),"y_")
      constructprop Qname(PackageNamespace("flash.geom"),"Point") 2
      coerce Qname(PackageNamespace("flash.geom"),"Point")
      setlocal 6
      findpropstrict Qname(PackageNamespace("flash.geom"),"Point")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"x_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"y_")
      constructprop Qname(PackageNamespace("flash.geom"),"Point") 2
      coerce Qname(PackageNamespace("flash.geom"),"Point")
      setlocal 7
      getlocal_0
      getlex Qname(PackageNamespace("flash.geom"),"Point")
      getlocal 6
      getlocal 7
      callproperty Qname(PackageNamespace(""),"distance") 2
      initproperty Qname(PackageNamespace(""),"maxDist_")
      getlocal_0
      getlex Qname(PackageNamespace(""),"Math")
      callproperty Qname(PackageNamespace(""),"random") 0
      pushbyte 5
      multiply
      initproperty Qname(PackageNamespace(""),"flowSpeed_")
      findpropstrict Qname(PackageNamespace(""),"total_")
      dup
      setlocal 8
      getproperty Qname(PackageNamespace(""),"total_")
      increment_i
      setlocal 9
      getlocal 8
      getlocal 9
      setproperty Qname(PackageNamespace(""),"total_")
      kill 9
      kill 8
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   override public function update(param1:int, param2:int) : Boolean
   {
      trait method Qname(PackageNamespace(""),"update")
      flag OVERRIDE
      dispid 0
      method
      name null
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"int")
      returns Qname(PackageNamespace(""),"Boolean")
      
      body
      maxstack 4
      localcount 12
      initscopedepth 6
      maxscopedepth 7
      
      code
      getlocal_0
      pushscope
      pushbyte 8
      convert_d
      setlocal_3
      findpropstrict Qname(PackageNamespace("flash.geom"),"Point")
      getlex Qname(PackageNamespace(""),"x_")
      getlex Qname(PackageNamespace(""),"y_")
      constructprop Qname(PackageNamespace("flash.geom"),"Point") 2
      coerce Qname(PackageNamespace("flash.geom"),"Point")
      setlocal 4
      findpropstrict Qname(PackageNamespace("flash.geom"),"Point")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"x_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"y_")
      constructprop Qname(PackageNamespace("flash.geom"),"Point") 2
      coerce Qname(PackageNamespace("flash.geom"),"Point")
      setlocal 5
      getlex Qname(PackageNamespace("flash.geom"),"Point")
      getlocal 4
      getlocal 5
      callproperty Qname(PackageNamespace(""),"distance") 2
      convert_d
      dup
      setlocal 6
      pushdouble 0.5
      ifnlt ofs0063
      findpropstrict Qname(PackageNamespace(""),"total_")
      dup
      setlocal 10
      getproperty Qname(PackageNamespace(""),"total_")
      decrement_i
      setlocal 11
      getlocal 10
      getlocal 11
      setproperty Qname(PackageNamespace(""),"total_")
      kill 11
      kill 10
      pushfalse
      returnvalue
      ofs0063:getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"flowSpeed_")
      getlocal_3
      getlocal_2
      multiply
      pushshort 1000
      divide
      add
      initproperty Qname(PackageNamespace(""),"flowSpeed_")
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"maxDist_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"flowSpeed_")
      getlocal_2
      multiply
      pushshort 1000
      divide
      subtract
      initproperty Qname(PackageNamespace(""),"maxDist_")
      getlocal 6
      getlocal_0
      getproperty Qname(PackageNamespace(""),"flowSpeed_")
      getlocal_2
      multiply
      pushshort 1000
      divide
      subtract
      convert_d
      dup
      setlocal 7
      getlocal_0
      getproperty Qname(PackageNamespace(""),"maxDist_")
      ifngt ofs00a6
      getlocal_0
      getproperty Qname(PackageNamespace(""),"maxDist_")
      convert_d
      setlocal 7
      ofs00a6:getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"x_")
      getlex Qname(PackageNamespace(""),"x_")
      subtract
      convert_d
      setlocal 8
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"y_")
      getlex Qname(PackageNamespace(""),"y_")
      subtract
      convert_d
      setlocal 9
      getlocal 8
      getlocal 7
      getlocal 6
      divide
      multiply
      convert_d
      setlocal 8
      getlocal 9
      getlocal 7
      getlocal 6
      divide
      multiply
      convert_d
      setlocal 9
      findpropstrict Qname(PackageNamespace(""),"moveTo")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"x_")
      getlocal 8
      subtract
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"y_")
      getlocal 9
      subtract
      callpropvoid Qname(PackageNamespace(""),"moveTo") 2
      pushtrue
      returnvalue
      end ; code
      end ; body
      end ; method
   }
}

import com.company.assembleegameclient.objects.GameObject;
import com.company.assembleegameclient.objects.particles.Particle;
import flash.geom.Point;

class FlowParticle2 extends Particle
{
   
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 5
      maxscopedepth 6
      
      code
      getlocal_0
      pushscope
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   public var start_:Point;
   
   public var go_:GameObject;
   
   public var accel_:Number;
   
   public var dx_:Number;
   
   public var dy_:Number;
   
   function FlowParticle2(param1:Number, param2:int, param3:int, param4:Number, param5:Point, param6:GameObject)
   {
      method
      name null
      param Qname(PackageNamespace(""),"Number")
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"Number")
      param Qname(PackageNamespace("flash.geom"),"Point")
      param Qname(PackageNamespace("com.company.assembleegameclient.objects"),"GameObject")
      returns null
      
      body
      maxstack 4
      localcount 7
      initscopedepth 6
      maxscopedepth 7
      
      code
      getlocal_0
      pushscope
      getlocal_0
      getlocal_3
      getlocal_1
      getlocal_2
      constructsuper 3
      getlocal_0
      getlocal 5
      initproperty Qname(PackageNamespace(""),"start_")
      getlocal_0
      getlocal 6
      initproperty Qname(PackageNamespace(""),"go_")
      getlocal_0
      getlocal 4
      initproperty Qname(PackageNamespace(""),"accel_")
      getlocal_0
      getlex Qname(PackageNamespace(""),"Math")
      callproperty Qname(PackageNamespace(""),"random") 0
      pushdouble 0.5
      subtract
      initproperty Qname(PackageNamespace(""),"dx_")
      getlocal_0
      getlex Qname(PackageNamespace(""),"Math")
      callproperty Qname(PackageNamespace(""),"random") 0
      pushdouble 0.5
      subtract
      initproperty Qname(PackageNamespace(""),"dy_")
      returnvoid
      end ; code
      end ; body
      end ; method
   }
   
   override public function update(param1:int, param2:int) : Boolean
   {
      trait method Qname(PackageNamespace(""),"update")
      flag OVERRIDE
      dispid 0
      method
      name null
      param Qname(PackageNamespace(""),"int")
      param Qname(PackageNamespace(""),"int")
      returns Qname(PackageNamespace(""),"Boolean")
      
      body
      maxstack 5
      localcount 9
      initscopedepth 6
      maxscopedepth 7
      
      code
      getlocal_0
      pushscope
      findpropstrict Qname(PackageNamespace("flash.geom"),"Point")
      getlex Qname(PackageNamespace(""),"x_")
      getlex Qname(PackageNamespace(""),"y_")
      constructprop Qname(PackageNamespace("flash.geom"),"Point") 2
      coerce Qname(PackageNamespace("flash.geom"),"Point")
      setlocal_3
      findpropstrict Qname(PackageNamespace("flash.geom"),"Point")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"x_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"y_")
      constructprop Qname(PackageNamespace("flash.geom"),"Point") 2
      coerce Qname(PackageNamespace("flash.geom"),"Point")
      setlocal 4
      getlex Qname(PackageNamespace("flash.geom"),"Point")
      getlocal_3
      getlocal 4
      callproperty Qname(PackageNamespace(""),"distance") 2
      convert_d
      dup
      setlocal 5
      pushdouble 0.5
      ifnlt ofs0043
      pushfalse
      returnvalue
      ofs0043:getlex Qname(PackageNamespace(""),"Math")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"y_")
      getlex Qname(PackageNamespace(""),"y_")
      subtract
      getlocal_0
      getproperty Qname(PackageNamespace(""),"go_")
      getproperty Qname(PackageNamespace(""),"x_")
      getlex Qname(PackageNamespace(""),"x_")
      subtract
      callproperty Qname(PackageNamespace(""),"atan2") 2
      convert_d
      setlocal 6
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"dx_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"accel_")
      getlex Qname(PackageNamespace(""),"Math")
      getlocal 6
      callproperty Qname(PackageNamespace(""),"cos") 1
      multiply
      getlocal_2
      multiply
      pushshort 1000
      divide
      add
      initproperty Qname(PackageNamespace(""),"dx_")
      getlocal_0
      getlocal_0
      getproperty Qname(PackageNamespace(""),"dy_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"accel_")
      getlex Qname(PackageNamespace(""),"Math")
      getlocal 6
      callproperty Qname(PackageNamespace(""),"sin") 1
      multiply
      getlocal_2
      multiply
      pushshort 1000
      divide
      add
      initproperty Qname(PackageNamespace(""),"dy_")
      getlex Qname(PackageNamespace(""),"x_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"dx_")
      getlocal_2
      multiply
      pushshort 1000
      divide
      add
      convert_d
      setlocal 7
      getlex Qname(PackageNamespace(""),"y_")
      getlocal_0
      getproperty Qname(PackageNamespace(""),"dy_")
      getlocal_2
      multiply
      pushshort 1000
      divide
      add
      convert_d
      setlocal 8
      findpropstrict Qname(PackageNamespace(""),"moveTo")
      getlocal 7
      getlocal 8
      callpropvoid Qname(PackageNamespace(""),"moveTo") 2
      pushtrue
      returnvalue
      end ; code
      end ; body
      end ; method
   }
}
