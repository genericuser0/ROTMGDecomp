package com.company.assembleegameclient.objects
{
   import com.company.assembleegameclient.game.GameSprite;
   import com.company.assembleegameclient.map.Map;
   import com.company.assembleegameclient.sound.SoundEffectLibrary;
   import com.company.assembleegameclient.ui.panels.Panel;
   import com.company.assembleegameclient.ui.panels.itemgrids.ContainerGrid;
   import com.company.util.PointUtil;
   
   public class Container extends GameObject implements IInteractiveObject
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var isLoot_:Boolean;
      
      public var canHaveSoulbound_:Boolean;
      
      public var ownerId_:String;
      
      public function Container(param1:XML)
      {
         method
         name null
         param Qname(PackageNamespace(""),"XML")
         returns null
         
         body
         maxstack 3
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         constructsuper 1
         findproperty Qname(PackageNamespace(""),"isInteractive_")
         pushtrue
         initproperty Qname(PackageNamespace(""),"isInteractive_")
         getlocal_0
         getlocal_1
         pushstring "Loot"
         callproperty Multiname("hasOwnProperty",[PrivateNamespace(null,"1666"),PackageNamespace(""),PrivateNamespace(null,"1667"),PackageNamespace("com.company.assembleegameclient.objects"),PackageInternalNs("com.company.assembleegameclient.objects"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("com.company.assembleegameclient.objects:Container"),StaticProtectedNs("com.company.assembleegameclient.objects:Container"),StaticProtectedNs("com.company.assembleegameclient.objects:GameObject"),StaticProtectedNs("com.company.assembleegameclient.objects:BasicObject")]) 1
         initproperty Qname(PackageNamespace(""),"isLoot_")
         getlocal_0
         getlocal_1
         pushstring "CanPutSoulboundObjects"
         callproperty Multiname("hasOwnProperty",[PrivateNamespace(null,"1666"),PackageNamespace(""),PrivateNamespace(null,"1667"),PackageNamespace("com.company.assembleegameclient.objects"),PackageInternalNs("com.company.assembleegameclient.objects"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("com.company.assembleegameclient.objects:Container"),StaticProtectedNs("com.company.assembleegameclient.objects:Container"),StaticProtectedNs("com.company.assembleegameclient.objects:GameObject"),StaticProtectedNs("com.company.assembleegameclient.objects:BasicObject")]) 1
         initproperty Qname(PackageNamespace(""),"canHaveSoulbound_")
         getlocal_0
         pushstring ""
         initproperty Qname(PackageNamespace(""),"ownerId_")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setOwnerId(param1:String) : void
      {
         trait method Qname(PackageNamespace(""),"setOwnerId")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"String")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         initproperty Qname(PackageNamespace(""),"ownerId_")
         findproperty Qname(PackageNamespace(""),"isInteractive_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"ownerId_")
         pushstring ""
         equals
         dup
         iftrue ofs001d
         pop
         getlocal_0
         callproperty Qname(PackageNamespace(""),"isBoundToCurrentAccount") 0
         convert_b
         ofs001d:initproperty Qname(PackageNamespace(""),"isInteractive_")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function isBoundToCurrentAccount() : Boolean
      {
         trait method Qname(PackageNamespace(""),"isBoundToCurrentAccount")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         getlex Qname(PackageNamespace(""),"map_")
         getproperty Qname(PackageNamespace(""),"player_")
         getproperty Qname(PackageNamespace(""),"accountId_")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"ownerId_")
         equals
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function addTo(param1:Map, param2:Number, param3:Number) : Boolean
      {
         trait method Qname(PackageNamespace(""),"addTo")
         flag OVERRIDE
         dispid 0
         method
         name null
         param Qname(PackageNamespace("com.company.assembleegameclient.map"),"Map")
         param Qname(PackageNamespace(""),"Number")
         param Qname(PackageNamespace(""),"Number")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         getlocal_2
         getlocal_3
         callsuper Qname(PackageNamespace(""),"addTo") 3
         iftrue ofs0010
         pushfalse
         returnvalue
         ofs0010:getlex Qname(PackageNamespace(""),"map_")
         getproperty Qname(PackageNamespace(""),"player_")
         pushnull
         ifne ofs001d
         pushtrue
         returnvalue
         ofs001d:getlex Qname(PackageNamespace("com.company.util"),"PointUtil")
         getlex Qname(PackageNamespace(""),"map_")
         getproperty Qname(PackageNamespace(""),"player_")
         getproperty Qname(PackageNamespace(""),"x_")
         getlex Qname(PackageNamespace(""),"map_")
         getproperty Qname(PackageNamespace(""),"player_")
         getproperty Qname(PackageNamespace(""),"y_")
         getlocal_2
         getlocal_3
         callproperty Qname(PackageNamespace(""),"distanceXY") 4
         convert_d
         setlocal 4
         getlocal_0
         getproperty Qname(PackageNamespace(""),"isLoot_")
         convert_b
         dup
         iffalse ofs004c
         pop
         getlocal 4
         pushbyte 10
         lessthan
         ofs004c:iffalse ofs005b
         getlex Qname(PackageNamespace("com.company.assembleegameclient.sound"),"SoundEffectLibrary")
         pushstring "loot_appears"
         callpropvoid Qname(PackageNamespace(""),"play") 1
         ofs005b:pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getPanel(param1:GameSprite) : Panel
      {
         trait method Qname(PackageNamespace(""),"getPanel")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("com.company.assembleegameclient.game"),"GameSprite")
         returns Qname(PackageNamespace("com.company.assembleegameclient.ui.panels"),"Panel")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         getlocal_1
         convert_b
         dup
         iffalse ofs000f
         pop
         getlocal_1
         getproperty Qname(PackageNamespace(""),"map")
         convert_b
         ofs000f:iffalse ofs0021
         getlocal_1
         getproperty Qname(PackageNamespace(""),"map")
         getproperty Qname(PackageNamespace(""),"player_")
         coerce Qname(PackageNamespace("com.company.assembleegameclient.objects"),"Player")
         jump ofs0025
         ofs0021:pushnull
         coerce Qname(PackageNamespace("com.company.assembleegameclient.objects"),"Player")
         ofs0025:coerce Qname(PackageNamespace("com.company.assembleegameclient.objects"),"Player")
         setlocal_2
         findpropstrict Qname(PackageNamespace("com.company.assembleegameclient.ui.panels.itemgrids"),"ContainerGrid")
         getlocal_0
         getlocal_2
         constructprop Qname(PackageNamespace("com.company.assembleegameclient.ui.panels.itemgrids"),"ContainerGrid") 2
         coerce Qname(PackageNamespace("com.company.assembleegameclient.ui.panels.itemgrids"),"ContainerGrid")
         setlocal_3
         getlocal_3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
