package kabam.lib.net.impl
{
   import kabam.lib.net.api.MessageHandlerProxy;
   import org.swiftsuspenders.Injector;
   
   public class ClassHandlerProxy implements MessageHandlerProxy
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var injector:Injector;
      
      private var handlerType:Class;
      
      private var handler:Object;
      
      public function ClassHandlerProxy()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setType(param1:Class) : ClassHandlerProxy
      {
         trait method Qname(PackageNamespace(""),"setType")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Class")
         returns Qname(PackageNamespace("kabam.lib.net.impl"),"ClassHandlerProxy")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         setproperty Qname(PrivateNamespace(null,"1082"),"handlerType")
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setInjector(param1:Injector) : ClassHandlerProxy
      {
         trait method Qname(PackageNamespace(""),"setInjector")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("org.swiftsuspenders"),"Injector")
         returns Qname(PackageNamespace("kabam.lib.net.impl"),"ClassHandlerProxy")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         setproperty Qname(PrivateNamespace(null,"1082"),"injector")
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getMethod() : Function
      {
         trait method Qname(PackageNamespace(""),"getMethod")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Function")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1082"),"handler")
         iffalse ofs0018
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1082"),"handler")
         getproperty Multiname("execute",[PrivateNamespace(null,"1082"),PackageNamespace("kabam.lib.net.impl"),PackageNamespace(""),PrivateNamespace(null,"2015"),PackageInternalNs("kabam.lib.net.impl"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("kabam.lib.net.impl:ClassHandlerProxy"),StaticProtectedNs("kabam.lib.net.impl:ClassHandlerProxy")])
         coerce Qname(PackageNamespace(""),"Function")
         jump ofs001f
         ofs0018:getlocal_0
         callproperty Qname(PrivateNamespace(null,"1082"),"makeHandlerAndReturnExecute") 0
         coerce Qname(PackageNamespace(""),"Function")
         ofs001f:returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function makeHandlerAndReturnExecute() : Function
      {
         trait method Qname(PrivateNamespace(null,"1082"),"makeHandlerAndReturnExecute")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Function")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1082"),"handlerType")
         iftrue ofs000c
         pushnull
         returnvalue
         ofs000c:getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1082"),"injector")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1082"),"handlerType")
         callproperty Qname(PackageNamespace(""),"getInstance") 1
         initproperty Qname(PrivateNamespace(null,"1082"),"handler")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1082"),"handler")
         getproperty Multiname("execute",[PrivateNamespace(null,"1082"),PackageNamespace("kabam.lib.net.impl"),PackageNamespace(""),PrivateNamespace(null,"2015"),PackageInternalNs("kabam.lib.net.impl"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("kabam.lib.net.impl:ClassHandlerProxy"),StaticProtectedNs("kabam.lib.net.impl:ClassHandlerProxy")])
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
