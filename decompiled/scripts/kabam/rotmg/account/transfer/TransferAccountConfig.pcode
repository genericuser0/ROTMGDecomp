package kabam.rotmg.account.transfer
{
   import kabam.rotmg.account.core.services.MigrateAccountTask;
   import kabam.rotmg.account.transfer.commands.CheckKabamAccountCommand;
   import kabam.rotmg.account.transfer.commands.TransferAccountCommand;
   import kabam.rotmg.account.transfer.services.TransferAccountTask;
   import kabam.rotmg.account.transfer.signals.CheckKabamAccountSignal;
   import kabam.rotmg.account.transfer.signals.TransferAccountSignal;
   import kabam.rotmg.account.transfer.view.KabamLoginMediator;
   import kabam.rotmg.account.transfer.view.KabamLoginView;
   import kabam.rotmg.account.transfer.view.TransferAccountMediator;
   import kabam.rotmg.account.transfer.view.TransferAccountView;
   import kabam.rotmg.core.signals.TaskErrorSignal;
   import org.swiftsuspenders.Injector;
   import robotlegs.bender.extensions.mediatorMap.api.IMediatorMap;
   import robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap;
   import robotlegs.bender.framework.api.IConfig;
   
   public class TransferAccountConfig implements IConfig
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Inject]
      public var injector:Injector;
      
      [Inject]
      public var mediatorMap:IMediatorMap;
      
      [Inject]
      public var commandMap:ISignalCommandMap;
      
      public function TransferAccountConfig()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function configure() : void
      {
         trait method Qname(PackageNamespace(""),"configure")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         callpropvoid Qname(ProtectedNamespace("kabam.rotmg.account.transfer:TransferAccountConfig"),"mapModels") 0
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"425"),"mapCommands") 0
         getlocal_0
         callpropvoid Qname(ProtectedNamespace("kabam.rotmg.account.transfer:TransferAccountConfig"),"mapMediators") 0
         getlocal_0
         callpropvoid Qname(ProtectedNamespace("kabam.rotmg.account.transfer:TransferAccountConfig"),"mapServices") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function mapModels() : void
      {
         trait method Qname(ProtectedNamespace("kabam.rotmg.account.transfer:TransferAccountConfig"),"mapModels")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function mapCommands() : void
      {
         trait method Qname(PrivateNamespace(null,"425"),"mapCommands")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"commandMap")
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.signals"),"TransferAccountSignal")
         callproperty Qname(Namespace("robotlegs.bender.extensions.signalCommandMap.api:ISignalCommandMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.commands"),"TransferAccountCommand")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper"),"toCommand") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"commandMap")
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.signals"),"CheckKabamAccountSignal")
         callproperty Qname(Namespace("robotlegs.bender.extensions.signalCommandMap.api:ISignalCommandMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.commands"),"CheckKabamAccountCommand")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper"),"toCommand") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         getlex Qname(PackageNamespace("kabam.rotmg.core.signals"),"TaskErrorSignal")
         callproperty Qname(PackageNamespace(""),"map") 1
         callpropvoid Qname(PackageNamespace(""),"asSingleton") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function mapMediators() : void
      {
         trait method Qname(ProtectedNamespace("kabam.rotmg.account.transfer:TransferAccountConfig"),"mapMediators")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"mediatorMap")
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.view"),"TransferAccountView")
         callproperty Qname(Namespace("robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.view"),"TransferAccountMediator")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper"),"toMediator") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"mediatorMap")
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.view"),"KabamLoginView")
         callproperty Qname(Namespace("robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.view"),"KabamLoginMediator")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper"),"toMediator") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function mapServices() : void
      {
         trait method Qname(ProtectedNamespace("kabam.rotmg.account.transfer:TransferAccountConfig"),"mapServices")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         getlex Qname(PackageNamespace("kabam.rotmg.account.core.services"),"MigrateAccountTask")
         callproperty Qname(PackageNamespace(""),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.account.transfer.services"),"TransferAccountTask")
         callpropvoid Qname(PackageNamespace(""),"toType") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
