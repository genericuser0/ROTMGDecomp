package kabam.rotmg.account.kongregate.commands
{
   import kabam.lib.tasks.BranchingTask;
   import kabam.lib.tasks.DispatchSignalTask;
   import kabam.lib.tasks.TaskMonitor;
   import kabam.rotmg.account.core.services.RelayLoginTask;
   import kabam.rotmg.ui.signals.RefreshScreenAfterLoginSignal;
   
   public class KongregateRelayApiLoginCommand
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Inject]
      public var relay:RelayLoginTask;
      
      [Inject]
      public var monitor:TaskMonitor;
      
      [Inject]
      public var refresh:RefreshScreenAfterLoginSignal;
      
      public function KongregateRelayApiLoginCommand()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function execute() : void
      {
         trait method Qname(PackageNamespace(""),"execute")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("kabam.lib.tasks"),"BranchingTask")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"relay")
         constructprop Qname(PackageNamespace("kabam.lib.tasks"),"BranchingTask") 1
         coerce Qname(PackageNamespace("kabam.lib.tasks"),"BranchingTask")
         setlocal_1
         getlocal_1
         findpropstrict Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"refresh")
         constructprop Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask") 1
         callpropvoid Qname(PackageNamespace(""),"addSuccessTask") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"monitor")
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"start") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
