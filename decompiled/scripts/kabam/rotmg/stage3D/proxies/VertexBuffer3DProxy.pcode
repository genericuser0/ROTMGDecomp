package kabam.rotmg.stage3D.proxies
{
   import flash.display3D.VertexBuffer3D;
   
   public class VertexBuffer3DProxy
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var vertexBuffer3D:VertexBuffer3D;
      
      protected var data:Vector.<Number>;
      
      public function VertexBuffer3DProxy(param1:VertexBuffer3D)
      {
         method
         name null
         param Qname(PackageNamespace("flash.display3D"),"VertexBuffer3D")
         returns null
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"870"),"vertexBuffer3D")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function uploadFromVector(param1:Vector.<Number>, param2:int, param3:int) : void
      {
         trait method Qname(PackageNamespace(""),"uploadFromVector")
         dispid 0
         method
         name null
         param TypeName(Qname(PackageNamespace("__AS3__.vec"),"Vector")<Qname(PackageNamespace(""),"Number")>)
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         setproperty Qname(ProtectedNamespace("kabam.rotmg.stage3D.proxies:VertexBuffer3DProxy"),"data")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"870"),"vertexBuffer3D")
         getlocal_1
         getlocal_2
         getlocal_3
         callpropvoid Qname(PackageNamespace(""),"uploadFromVector") 3
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getVertexBuffer3D() : VertexBuffer3D
      {
         trait method Qname(PackageNamespace(""),"getVertexBuffer3D")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("flash.display3D"),"VertexBuffer3D")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"870"),"vertexBuffer3D")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getData() : Vector.<Number>
      {
         trait method Qname(PackageNamespace(""),"getData")
         dispid 0
         method
         name null
         returns TypeName(Qname(PackageNamespace("__AS3__.vec"),"Vector")<Qname(PackageNamespace(""),"Number")>)
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(ProtectedNamespace("kabam.rotmg.stage3D.proxies:VertexBuffer3DProxy"),"data")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
