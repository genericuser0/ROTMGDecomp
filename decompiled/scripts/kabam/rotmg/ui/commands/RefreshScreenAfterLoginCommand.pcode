package kabam.rotmg.ui.commands
{
   import com.company.assembleegameclient.game.GameSprite;
   import com.company.assembleegameclient.screens.CharacterSelectionAndNewsScreen;
   import flash.display.Sprite;
   import kabam.rotmg.account.core.signals.UpdateAccountInfoSignal;
   import kabam.rotmg.core.model.ScreenModel;
   import kabam.rotmg.core.signals.InvalidateDataSignal;
   import kabam.rotmg.core.signals.SetScreenWithValidDataSignal;
   
   public class RefreshScreenAfterLoginCommand
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Inject]
      public var screenModel:ScreenModel;
      
      [Inject]
      public var update:UpdateAccountInfoSignal;
      
      [Inject]
      public var invalidate:InvalidateDataSignal;
      
      [Inject]
      public var setScreenWithValidData:SetScreenWithValidDataSignal;
      
      public function RefreshScreenAfterLoginCommand()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function execute() : void
      {
         trait method Qname(PackageNamespace(""),"execute")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"update")
         callpropvoid Qname(PackageNamespace(""),"dispatch") 0
         getlocal_0
         getproperty Qname(PackageNamespace(""),"invalidate")
         callpropvoid Qname(PackageNamespace(""),"dispatch") 0
         getlocal_0
         getproperty Qname(PackageNamespace(""),"setScreenWithValidData")
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"174"),"getTargetScreen") 0
         callpropvoid Qname(PackageNamespace(""),"dispatch") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function getTargetScreen() : Sprite
      {
         trait method Qname(PrivateNamespace(null,"174"),"getTargetScreen")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("flash.display"),"Sprite")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"screenModel")
         callproperty Qname(PackageNamespace(""),"getCurrentScreenType") 0
         coerce Qname(PackageNamespace(""),"Class")
         setlocal_1
         getlocal_1
         pushnull
         equals
         dup
         iftrue ofs001a
         pop
         getlocal_1
         getlex Qname(PackageNamespace("com.company.assembleegameclient.game"),"GameSprite")
         equals
         ofs001a:iffalse ofs0024
         getlex Qname(PackageNamespace("com.company.assembleegameclient.screens"),"CharacterSelectionAndNewsScreen")
         coerce Qname(PackageNamespace(""),"Class")
         setlocal_1
         ofs0024:getlocal_1
         construct 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
