package robotlegs.bender.extensions.commandCenter.impl
{
   import robotlegs.bender.extensions.commandCenter.api.CommandMappingError;
   import robotlegs.bender.extensions.commandCenter.api.ICommandMapping;
   import robotlegs.bender.extensions.commandCenter.dsl.ICommandMappingConfig;
   import robotlegs.bender.framework.impl.MappingConfigValidator;
   
   public class CommandMapping implements ICommandMapping, ICommandMappingConfig
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _commandClass:Class;
      
      private var _guards:Array;
      
      private var _hooks:Array;
      
      private var _once:Boolean;
      
      private var _next:ICommandMapping;
      
      private var _validator:MappingConfigValidator;
      
      public function CommandMapping(param1:Class)
      {
         method
         name null
         param Qname(PackageNamespace(""),"Class")
         returns null
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         newarray 0
         initproperty Qname(PrivateNamespace(null,"1157"),"_guards")
         getlocal_0
         newarray 0
         initproperty Qname(PrivateNamespace(null,"1157"),"_hooks")
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"1157"),"_commandClass")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get commandClass() : Class
      {
         trait getter Qname(PackageNamespace(""),"commandClass")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Class")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_commandClass")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get guards() : Array
      {
         trait getter Qname(PackageNamespace(""),"guards")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_guards")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get hooks() : Array
      {
         trait getter Qname(PackageNamespace(""),"hooks")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_hooks")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function withGuards(... rest) : ICommandMappingConfig
      {
         trait method Qname(PackageNamespace(""),"withGuards")
         dispid 0
         method
         name null
         flag NEED_REST
         returns Qname(PackageNamespace("robotlegs.bender.extensions.commandCenter.dsl"),"ICommandMappingConfig")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         coerce_a
         dup
         iffalse ofs0018
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         getlocal_1
         callproperty Qname(PackageNamespace(""),"checkGuards") 1
         coerce_a
         ofs0018:pop
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_guards")
         getproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"concat")
         pushnull
         getlocal_1
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"apply") 2
         initproperty Qname(PrivateNamespace(null,"1157"),"_guards")
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function withHooks(... rest) : ICommandMappingConfig
      {
         trait method Qname(PackageNamespace(""),"withHooks")
         dispid 0
         method
         name null
         flag NEED_REST
         returns Qname(PackageNamespace("robotlegs.bender.extensions.commandCenter.dsl"),"ICommandMappingConfig")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         coerce_a
         dup
         iffalse ofs0018
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         getlocal_1
         callproperty Qname(PackageNamespace(""),"checkHooks") 1
         coerce_a
         ofs0018:pop
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_hooks")
         getproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"concat")
         pushnull
         getlocal_1
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"apply") 2
         initproperty Qname(PrivateNamespace(null,"1157"),"_hooks")
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get fireOnce() : Boolean
      {
         trait getter Qname(PackageNamespace(""),"fireOnce")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_once")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function once(param1:Boolean = true) : ICommandMappingConfig
      {
         trait method Qname(PackageNamespace(""),"once")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace(""),"Boolean")
         optional true
         returns Qname(PackageNamespace("robotlegs.bender.extensions.commandCenter.dsl"),"ICommandMappingConfig")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         coerce_a
         dup
         iffalse ofs0013
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_once")
         not
         coerce_a
         ofs0013:dup
         iffalse ofs002d
         pop
         getlocal_0
         pushstring "You attempted to change an existing mapping for "
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_commandClass")
         add
         pushstring " by setting once(). Please unmap first."
         add
         callproperty Qname(PrivateNamespace(null,"1157"),"throwMappingError") 1
         coerce_a
         ofs002d:pop
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"1157"),"_once")
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get next() : ICommandMapping
      {
         trait getter Qname(PackageNamespace(""),"next")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("robotlegs.bender.extensions.commandCenter.api"),"ICommandMapping")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_next")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set next(param1:ICommandMapping) : void
      {
         trait setter Qname(PackageNamespace(""),"next")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("robotlegs.bender.extensions.commandCenter.api"),"ICommandMapping")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"1157"),"_next")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function throwMappingError(param1:String) : void
      {
         trait method Qname(PrivateNamespace(null,"1157"),"throwMappingError")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"String")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("robotlegs.bender.extensions.commandCenter.api"),"CommandMappingError")
         getlocal_1
         constructprop Qname(PackageNamespace("robotlegs.bender.extensions.commandCenter.api"),"CommandMappingError") 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      function invalidate() : void
      {
         trait method Qname(PackageInternalNs("robotlegs.bender.extensions.commandCenter.impl"),"invalidate")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         iffalse ofs0016
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         callpropvoid Qname(PackageNamespace(""),"invalidate") 0
         jump ofs001b
         ofs0016:getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"1157"),"createValidator") 0
         ofs001b:getlocal_0
         newarray 0
         initproperty Qname(PrivateNamespace(null,"1157"),"_guards")
         getlocal_0
         newarray 0
         initproperty Qname(PrivateNamespace(null,"1157"),"_hooks")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validate() : void
      {
         trait method Qname(PackageNamespace(""),"validate")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         iftrue ofs0013
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"1157"),"createValidator") 0
         jump ofs002f
         ofs0013:getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         getproperty Qname(PackageNamespace(""),"valid")
         iftrue ofs002f
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_guards")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_hooks")
         callpropvoid Qname(PackageNamespace(""),"validate") 2
         ofs002f:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function createValidator() : void
      {
         trait method Qname(PrivateNamespace(null,"1157"),"createValidator")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         findpropstrict Qname(PackageNamespace("robotlegs.bender.framework.impl"),"MappingConfigValidator")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_guards")
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"slice") 0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_hooks")
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"slice") 0
         pushnull
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1157"),"_commandClass")
         constructprop Qname(PackageNamespace("robotlegs.bender.framework.impl"),"MappingConfigValidator") 4
         initproperty Qname(PrivateNamespace(null,"1157"),"_validator")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
