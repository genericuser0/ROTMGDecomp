package org.hamcrest
{
   import flash.errors.IllegalOperationError;
   
   public class DiagnosingMatcher extends BaseMatcher
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function DiagnosingMatcher()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function describeMismatch(param1:Object, param2:Description) : void
      {
         trait method Qname(PackageNamespace(""),"describeMismatch")
         flag OVERRIDE
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Object")
         param Qname(PackageNamespace("org.hamcrest"),"Description")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(ProtectedNamespace("org.hamcrest:DiagnosingMatcher"),"matchesOrDescribesMismatch")
         getlocal_1
         getlocal_2
         callpropvoid Qname(ProtectedNamespace("org.hamcrest:DiagnosingMatcher"),"matchesOrDescribesMismatch") 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function matchesOrDescribesMismatch(param1:Object, param2:Description) : Boolean
      {
         trait method Qname(ProtectedNamespace("org.hamcrest:DiagnosingMatcher"),"matchesOrDescribesMismatch")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Object")
         param Qname(PackageNamespace("org.hamcrest"),"Description")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("flash.errors"),"IllegalOperationError")
         pushstring "DiagnosingMatcher#matches is abstract and must be overriden in a subclass"
         constructprop Qname(PackageNamespace("flash.errors"),"IllegalOperationError") 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      override public function matches(param1:Object) : Boolean
      {
         trait method Qname(PackageNamespace(""),"matches")
         flag OVERRIDE
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Object")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(ProtectedNamespace("org.hamcrest:DiagnosingMatcher"),"matchesOrDescribesMismatch")
         getlocal_1
         findpropstrict Qname(PackageNamespace("org.hamcrest"),"NullDescription")
         constructprop Qname(PackageNamespace("org.hamcrest"),"NullDescription") 0
         callproperty Qname(ProtectedNamespace("org.hamcrest:DiagnosingMatcher"),"matchesOrDescribesMismatch") 2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
