package org.swiftsuspenders.mapping
{
   import org.swiftsuspenders.Injector;
   import org.swiftsuspenders.InjectorError;
   import org.swiftsuspenders.dependencyproviders.ClassProvider;
   import org.swiftsuspenders.dependencyproviders.DependencyProvider;
   import org.swiftsuspenders.dependencyproviders.ForwardingProvider;
   import org.swiftsuspenders.dependencyproviders.InjectorUsingProvider;
   import org.swiftsuspenders.dependencyproviders.LocalOnlyProvider;
   import org.swiftsuspenders.dependencyproviders.SingletonProvider;
   import org.swiftsuspenders.dependencyproviders.SoftDependencyProvider;
   import org.swiftsuspenders.dependencyproviders.ValueProvider;
   import org.swiftsuspenders.utils.SsInternal;
   
   public class InjectionMapping implements ProviderlessMapping, UnsealedMapping
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _type:Class;
      
      private var _name:String;
      
      private var _mappingId:String;
      
      private var _creatingInjector:Injector;
      
      private var _defaultProviderSet:Boolean;
      
      private var _overridingInjector:Injector;
      
      private var _soft:Boolean;
      
      private var _local:Boolean;
      
      private var _sealed:Boolean;
      
      private var _sealKey:Object;
      
      public function InjectionMapping(param1:Injector, param2:Class, param3:String, param4:String)
      {
         method
         name null
         param Qname(PackageNamespace("org.swiftsuspenders"),"Injector")
         param Qname(PackageNamespace(""),"Class")
         param Qname(PackageNamespace(""),"String")
         param Qname(PackageNamespace(""),"String")
         returns null
         
         body
         maxstack 3
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         getlocal_0
         getlocal_2
         initproperty Qname(PrivateNamespace(null,"555"),"_type")
         getlocal_0
         getlocal_3
         initproperty Qname(PrivateNamespace(null,"555"),"_name")
         getlocal_0
         getlocal 4
         initproperty Qname(PrivateNamespace(null,"555"),"_mappingId")
         getlocal_0
         pushtrue
         initproperty Qname(PrivateNamespace(null,"555"),"_defaultProviderSet")
         getlocal_0
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ClassProvider")
         getlocal_2
         constructprop Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ClassProvider") 1
         callpropvoid Qname(PrivateNamespace(null,"555"),"mapProvider") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function asSingleton() : UnsealedMapping
      {
         trait method Qname(PackageNamespace(""),"asSingleton")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"UnsealedMapping")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_type")
         callpropvoid Qname(PackageNamespace(""),"toSingleton") 1
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function toType(param1:Class) : UnsealedMapping
      {
         trait method Qname(PackageNamespace(""),"toType")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Class")
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"UnsealedMapping")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ClassProvider")
         getlocal_1
         constructprop Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ClassProvider") 1
         callpropvoid Qname(PackageNamespace(""),"toProvider") 1
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function toSingleton(param1:Class) : UnsealedMapping
      {
         trait method Qname(PackageNamespace(""),"toSingleton")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Class")
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"UnsealedMapping")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"SingletonProvider")
         getlocal_1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         constructprop Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"SingletonProvider") 2
         callpropvoid Qname(PackageNamespace(""),"toProvider") 1
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function toValue(param1:Object) : UnsealedMapping
      {
         trait method Qname(PackageNamespace(""),"toValue")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Object")
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"UnsealedMapping")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ValueProvider")
         getlocal_1
         constructprop Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ValueProvider") 1
         callpropvoid Qname(PackageNamespace(""),"toProvider") 1
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function toProvider(param1:DependencyProvider) : UnsealedMapping
      {
         trait method Qname(PackageNamespace(""),"toProvider")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"UnsealedMapping")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         coerce_a
         dup
         iffalse ofs0013
         pop
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"555"),"throwSealedError") 0
         coerce_a
         ofs0013:pop
         getlocal_0
         callproperty Qname(PackageNamespace(""),"hasProvider") 0
         convert_b
         dup
         iffalse ofs0024
         pop
         getlocal_1
         pushnull
         equals
         not
         ofs0024:dup
         iffalse ofs002f
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_defaultProviderSet")
         not
         ofs002f:iffalse ofs008e
         findpropstrict Qname(PackageNamespace(""),"trace")
         pushstring "Warning: Injector already has a mapping for "
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_mappingId")
         add
         pushstring ".\n "
         add
         pushstring "If you have overridden this mapping intentionally you can use "
         add
         pushstring "\"injector.unmap()\" prior to your replacement mapping in order to "
         add
         pushstring "avoid seeing this message."
         add
         callpropvoid Qname(PackageNamespace(""),"trace") 1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         getlex Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getproperty Qname(PackageNamespace(""),"MAPPING_OVERRIDE")
         callproperty Qname(PackageNamespace(""),"hasEventListener") 1
         dup
         iffalse ofs008d
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getlex Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getproperty Qname(PackageNamespace(""),"MAPPING_OVERRIDE")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_type")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_name")
         getlocal_0
         constructprop Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent") 4
         callproperty Qname(PackageNamespace(""),"dispatchEvent") 1
         ofs008d:pop
         ofs008e:getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"555"),"dispatchPreChangeEvent") 0
         getlocal_0
         pushfalse
         initproperty Qname(PrivateNamespace(null,"555"),"_defaultProviderSet")
         getlocal_0
         getlocal_1
         callpropvoid Qname(PrivateNamespace(null,"555"),"mapProvider") 1
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"555"),"dispatchPostChangeEvent") 0
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function softly() : ProviderlessMapping
      {
         trait method Qname(PackageNamespace(""),"softly")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"ProviderlessMapping")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         pushnull
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         coerce_a
         dup
         iffalse ofs0017
         pop
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"555"),"throwSealedError") 0
         coerce_a
         ofs0017:pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_soft")
         iftrue ofs003d
         getlocal_0
         callproperty Qname(PackageNamespace(""),"getProvider") 0
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"555"),"dispatchPreChangeEvent") 0
         getlocal_0
         pushtrue
         initproperty Qname(PrivateNamespace(null,"555"),"_soft")
         getlocal_0
         getlocal_1
         callpropvoid Qname(PrivateNamespace(null,"555"),"mapProvider") 1
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"555"),"dispatchPostChangeEvent") 0
         ofs003d:getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function locally() : ProviderlessMapping
      {
         trait method Qname(PackageNamespace(""),"locally")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"ProviderlessMapping")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         coerce_a
         dup
         iffalse ofs0013
         pop
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"555"),"throwSealedError") 0
         coerce_a
         ofs0013:pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_local")
         iffalse ofs001e
         getlocal_0
         returnvalue
         ofs001e:getlocal_0
         callproperty Qname(PackageNamespace(""),"getProvider") 0
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"555"),"dispatchPreChangeEvent") 0
         getlocal_0
         pushtrue
         initproperty Qname(PrivateNamespace(null,"555"),"_local")
         getlocal_0
         getlocal_1
         callpropvoid Qname(PrivateNamespace(null,"555"),"mapProvider") 1
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"555"),"dispatchPostChangeEvent") 0
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function seal() : Object
      {
         trait method Qname(PackageNamespace(""),"seal")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Object")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         iffalse ofs0016
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError")
         pushstring "Mapping is already sealed."
         constructprop Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError") 1
         throw
         ofs0016:getlocal_0
         pushtrue
         initproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         getlocal_0
         newobject 0
         initproperty Qname(PrivateNamespace(null,"555"),"_sealKey")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealKey")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function unseal(param1:Object) : InjectionMapping
      {
         trait method Qname(PackageNamespace(""),"unseal")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Object")
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"InjectionMapping")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         iftrue ofs0016
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError")
         pushstring "Can\'t unseal a non-sealed mapping."
         constructprop Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError") 1
         throw
         ofs0016:getlocal_1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealKey")
         ifstricteq ofs002b
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError")
         pushstring "Can\'t unseal mapping without the correct key."
         constructprop Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError") 1
         throw
         ofs002b:getlocal_0
         pushfalse
         initproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         getlocal_0
         pushnull
         initproperty Qname(PrivateNamespace(null,"555"),"_sealKey")
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get isSealed() : Boolean
      {
         trait getter Qname(PackageNamespace(""),"isSealed")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function hasProvider() : Boolean
      {
         trait method Qname(PackageNamespace(""),"hasProvider")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace(""),"Boolean")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         getlex Qname(PackageNamespace("org.swiftsuspenders.utils"),"SsInternal")
         coerce Qname(PackageNamespace(""),"Namespace")
         getproperty RTQname("providerMappings")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_mappingId")
         getproperty MultinameL([PrivateNamespace(null,"555"),PackageNamespace(""),PackageNamespace("org.swiftsuspenders.mapping"),PrivateNamespace(null,"1565"),PackageInternalNs("org.swiftsuspenders.mapping"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.swiftsuspenders.mapping:InjectionMapping"),StaticProtectedNs("org.swiftsuspenders.mapping:InjectionMapping")])
         callproperty Qname(PackageNamespace(""),"Boolean") 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getProvider() : DependencyProvider
      {
         trait method Qname(PackageNamespace(""),"getProvider")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         getlex Qname(PackageNamespace("org.swiftsuspenders.utils"),"SsInternal")
         coerce Qname(PackageNamespace(""),"Namespace")
         getproperty RTQname("providerMappings")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_mappingId")
         getproperty MultinameL([PrivateNamespace(null,"555"),PackageNamespace(""),PackageNamespace("org.swiftsuspenders.mapping"),PrivateNamespace(null,"1565"),PackageInternalNs("org.swiftsuspenders.mapping"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.swiftsuspenders.mapping:InjectionMapping"),StaticProtectedNs("org.swiftsuspenders.mapping:InjectionMapping")])
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         jump ofs0030
         ofs0021:label
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ForwardingProvider")
         getlocal_1
         callproperty Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ForwardingProvider") 1
         getproperty Qname(PackageNamespace(""),"provider")
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         ofs0030:getlocal_1
         getlex Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"ForwardingProvider")
         istypelate
         iftrue ofs0021
         getlocal_1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setInjector(param1:Injector) : InjectionMapping
      {
         trait method Qname(PackageNamespace(""),"setInjector")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("org.swiftsuspenders"),"Injector")
         returns Qname(PackageNamespace("org.swiftsuspenders.mapping"),"InjectionMapping")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_sealed")
         coerce_a
         dup
         iffalse ofs0013
         pop
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"555"),"throwSealedError") 0
         coerce_a
         ofs0013:pop
         getlocal_1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_overridingInjector")
         ifne ofs001f
         getlocal_0
         returnvalue
         ofs001f:getlocal_0
         callproperty Qname(PackageNamespace(""),"getProvider") 0
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_2
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"555"),"_overridingInjector")
         getlocal_0
         getlocal_2
         callpropvoid Qname(PrivateNamespace(null,"555"),"mapProvider") 1
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function mapProvider(param1:DependencyProvider) : void
      {
         trait method Qname(PrivateNamespace(null,"555"),"mapProvider")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_soft")
         iffalse ofs0015
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"SoftDependencyProvider")
         getlocal_1
         constructprop Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"SoftDependencyProvider") 1
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         ofs0015:getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_local")
         iffalse ofs0028
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"LocalOnlyProvider")
         getlocal_1
         constructprop Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"LocalOnlyProvider") 1
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         ofs0028:getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_overridingInjector")
         iffalse ofs003f
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"InjectorUsingProvider")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_overridingInjector")
         getlocal_1
         constructprop Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"InjectorUsingProvider") 2
         coerce Qname(PackageNamespace("org.swiftsuspenders.dependencyproviders"),"DependencyProvider")
         setlocal_1
         ofs003f:getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         getlex Qname(PackageNamespace("org.swiftsuspenders.utils"),"SsInternal")
         coerce Qname(PackageNamespace(""),"Namespace")
         getproperty RTQname("providerMappings")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_mappingId")
         getlocal_1
         setproperty MultinameL([PrivateNamespace(null,"555"),PackageNamespace(""),PackageNamespace("org.swiftsuspenders.mapping"),PrivateNamespace(null,"1565"),PackageInternalNs("org.swiftsuspenders.mapping"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("org.swiftsuspenders.mapping:InjectionMapping"),StaticProtectedNs("org.swiftsuspenders.mapping:InjectionMapping")])
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function throwSealedError() : void
      {
         trait method Qname(PrivateNamespace(null,"555"),"throwSealedError")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError")
         pushstring "Can\'t change a sealed mapping"
         constructprop Qname(PackageNamespace("org.swiftsuspenders"),"InjectorError") 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      private function dispatchPreChangeEvent() : void
      {
         trait method Qname(PrivateNamespace(null,"555"),"dispatchPreChangeEvent")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         getlex Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getproperty Qname(PackageNamespace(""),"PRE_MAPPING_CHANGE")
         callproperty Qname(PackageNamespace(""),"hasEventListener") 1
         dup
         iffalse ofs0036
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getlex Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getproperty Qname(PackageNamespace(""),"PRE_MAPPING_CHANGE")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_type")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_name")
         getlocal_0
         constructprop Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent") 4
         callproperty Qname(PackageNamespace(""),"dispatchEvent") 1
         ofs0036:pop
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function dispatchPostChangeEvent() : void
      {
         trait method Qname(PrivateNamespace(null,"555"),"dispatchPostChangeEvent")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         getlex Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getproperty Qname(PackageNamespace(""),"POST_MAPPING_CHANGE")
         callproperty Qname(PackageNamespace(""),"hasEventListener") 1
         dup
         iffalse ofs0036
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_creatingInjector")
         findpropstrict Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getlex Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent")
         getproperty Qname(PackageNamespace(""),"POST_MAPPING_CHANGE")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_type")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"555"),"_name")
         getlocal_0
         constructprop Qname(PackageNamespace("org.swiftsuspenders.mapping"),"MappingEvent") 4
         callproperty Qname(PackageNamespace(""),"dispatchEvent") 1
         ofs0036:pop
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
