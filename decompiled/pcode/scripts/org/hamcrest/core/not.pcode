package org.hamcrest.core
{
   import org.hamcrest.Matcher;
   import org.hamcrest.object.equalTo;
   
   public function not(param1:Object) : Matcher
   {
      trait method Qname(PackageNamespace("org.hamcrest.core"),"not")
      dispid 51
      method
      name null
      param Qname(PackageNamespace(""),"Object")
      returns Qname(PackageNamespace("org.hamcrest"),"Matcher")
      
      body
      maxstack 3
      localcount 2
      initscopedepth 1
      maxscopedepth 2
      
      code
      getlocal_0
      pushscope
      getlocal_1
      getlex Qname(PackageNamespace("org.hamcrest"),"Matcher")
      istypelate
      iffalse ofs0016
      findpropstrict Qname(PackageNamespace("org.hamcrest.core"),"IsNotMatcher")
      getlocal_1
      getlex Qname(PackageNamespace("org.hamcrest"),"Matcher")
      astypelate
      constructprop Qname(PackageNamespace("org.hamcrest.core"),"IsNotMatcher") 1
      returnvalue
      ofs0016:findpropstrict Qname(PackageNamespace("org.hamcrest.core"),"not")
      findpropstrict Qname(PackageNamespace("org.hamcrest.object"),"equalTo")
      getlocal_1
      callproperty Qname(PackageNamespace("org.hamcrest.object"),"equalTo") 1
      callproperty Qname(PackageNamespace("org.hamcrest.core"),"not") 1
      returnvalue
      end ; code
      end ; body
      end ; method
   }
}
