package robotlegs.bender.extensions.localEventMap.impl
{
   import flash.events.IEventDispatcher;
   
   public class EventMapConfig
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var _dispatcher:IEventDispatcher;
      
      private var _eventString:String;
      
      private var _listener:Function;
      
      private var _eventClass:Class;
      
      private var _callback:Function;
      
      private var _useCapture:Boolean;
      
      public function EventMapConfig(param1:IEventDispatcher, param2:String, param3:Function, param4:Class, param5:Function, param6:Boolean)
      {
         method
         name null
         param Qname(PackageNamespace("flash.events"),"IEventDispatcher")
         param Qname(PackageNamespace(""),"String")
         param Qname(PackageNamespace(""),"Function")
         param Qname(PackageNamespace(""),"Class")
         param Qname(PackageNamespace(""),"Function")
         param Qname(PackageNamespace(""),"Boolean")
         returns null
         
         body
         maxstack 2
         localcount 7
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"1088"),"_dispatcher")
         getlocal_0
         getlocal_2
         initproperty Qname(PrivateNamespace(null,"1088"),"_eventString")
         getlocal_0
         getlocal_3
         initproperty Qname(PrivateNamespace(null,"1088"),"_listener")
         getlocal_0
         getlocal 4
         initproperty Qname(PrivateNamespace(null,"1088"),"_eventClass")
         getlocal_0
         getlocal 5
         initproperty Qname(PrivateNamespace(null,"1088"),"_callback")
         getlocal_0
         getlocal 6
         initproperty Qname(PrivateNamespace(null,"1088"),"_useCapture")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get dispatcher() : IEventDispatcher
      {
         trait getter Qname(PackageNamespace(""),"dispatcher")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("flash.events"),"IEventDispatcher")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1088"),"_dispatcher")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get eventString() : String
      {
         trait getter Qname(PackageNamespace(""),"eventString")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1088"),"_eventString")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get listener() : Function
      {
         trait getter Qname(PackageNamespace(""),"listener")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Function")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1088"),"_listener")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get eventClass() : Class
      {
         trait getter Qname(PackageNamespace(""),"eventClass")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Class")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1088"),"_eventClass")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get callback() : Function
      {
         trait getter Qname(PackageNamespace(""),"callback")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Function")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1088"),"_callback")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get useCapture() : Boolean
      {
         trait getter Qname(PackageNamespace(""),"useCapture")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1088"),"_useCapture")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
