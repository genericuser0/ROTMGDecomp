package robotlegs.bender.extensions.matching
{
   import flash.errors.IllegalOperationError;
   
   public class TypeMatcher implements ITypeMatcher, ITypeMatcherFactory
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected const _allOfTypes:Vector.<Class>;
      
      protected const _anyOfTypes:Vector.<Class>;
      
      protected const _noneOfTypes:Vector.<Class>;
      
      protected var _typeFilter:ITypeFilter;
      
      public function TypeMatcher()
      {
         method
         name null
         returns null
         
         body
         maxstack 3
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlex Multiname("Vector",[PrivateNamespace(null,"2023"),ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),PackageNamespace("robotlegs.bender.extensions.matching"),PackageNamespace(""),PackageNamespace("__AS3__.vec"),PrivateNamespace(null,"2024"),PackageInternalNs("robotlegs.bender.extensions.matching"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
         getlex Qname(PackageNamespace(""),"Class")
         applytype 1
         construct 0
         initproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_allOfTypes")
         getlocal_0
         getlex Multiname("Vector",[PrivateNamespace(null,"2023"),ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),PackageNamespace("robotlegs.bender.extensions.matching"),PackageNamespace(""),PackageNamespace("__AS3__.vec"),PrivateNamespace(null,"2024"),PackageInternalNs("robotlegs.bender.extensions.matching"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
         getlex Qname(PackageNamespace(""),"Class")
         applytype 1
         construct 0
         initproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_anyOfTypes")
         getlocal_0
         getlex Multiname("Vector",[PrivateNamespace(null,"2023"),ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),PackageNamespace("robotlegs.bender.extensions.matching"),PackageNamespace(""),PackageNamespace("__AS3__.vec"),PrivateNamespace(null,"2024"),PackageInternalNs("robotlegs.bender.extensions.matching"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
         getlex Qname(PackageNamespace(""),"Class")
         applytype 1
         construct 0
         initproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_noneOfTypes")
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function allOf(... rest) : TypeMatcher
      {
         trait method Qname(PackageNamespace(""),"allOf")
         dispid 0
         method
         name null
         flag NEED_REST
         returns Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcher")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_allOfTypes")
         callpropvoid Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"pushAddedTypesTo") 2
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function anyOf(... rest) : TypeMatcher
      {
         trait method Qname(PackageNamespace(""),"anyOf")
         dispid 0
         method
         name null
         flag NEED_REST
         returns Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcher")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_anyOfTypes")
         callpropvoid Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"pushAddedTypesTo") 2
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function noneOf(... rest) : TypeMatcher
      {
         trait method Qname(PackageNamespace(""),"noneOf")
         dispid 0
         method
         name null
         flag NEED_REST
         returns Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcher")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_noneOfTypes")
         callpropvoid Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"pushAddedTypesTo") 2
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function createTypeFilter() : ITypeFilter
      {
         trait method Qname(PackageNamespace(""),"createTypeFilter")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"ITypeFilter")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_typeFilter")
         coerce Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"ITypeFilter")
         dup
         iftrue ofs0018
         pop
         getlocal_0
         callproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"buildTypeFilter") 0
         coerce Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"ITypeFilter")
         ofs0018:dup
         setlocal_1
         initproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_typeFilter")
         getlocal_1
         kill 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function lock() : ITypeMatcherFactory
      {
         trait method Qname(PackageNamespace(""),"lock")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"ITypeMatcherFactory")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         callpropvoid Qname(PackageNamespace(""),"createTypeFilter") 0
         getlocal_0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function clone() : TypeMatcher
      {
         trait method Qname(PackageNamespace(""),"clone")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcher")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcher")
         constructprop Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcher") 0
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_allOfTypes")
         callproperty Qname(PackageNamespace(""),"allOf") 1
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_anyOfTypes")
         callproperty Qname(PackageNamespace(""),"anyOf") 1
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_noneOfTypes")
         callproperty Qname(PackageNamespace(""),"noneOf") 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function buildTypeFilter() : ITypeFilter
      {
         trait method Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"buildTypeFilter")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"ITypeFilter")
         
         body
         maxstack 4
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_allOfTypes")
         getproperty Qname(PackageNamespace(""),"length")
         pushbyte 0
         equals
         dup
         iffalse ofs001c
         pop
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_anyOfTypes")
         getproperty Qname(PackageNamespace(""),"length")
         pushbyte 0
         equals
         ofs001c:dup
         iffalse ofs002c
         pop
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_noneOfTypes")
         getproperty Qname(PackageNamespace(""),"length")
         pushbyte 0
         equals
         ofs002c:iffalse ofs003f
         findpropstrict Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcherError")
         getlex Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcherError")
         getproperty Qname(PackageNamespace(""),"EMPTY_MATCHER")
         constructprop Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeMatcherError") 1
         throw
         ofs003f:findpropstrict Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeFilter")
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_allOfTypes")
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_anyOfTypes")
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_noneOfTypes")
         constructprop Qname(PackageNamespace("robotlegs.bender.extensions.matching"),"TypeFilter") 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function pushAddedTypesTo(param1:Array, param2:Vector.<Class>) : void
      {
         trait method Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"pushAddedTypesTo")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         param TypeName(Qname(PackageNamespace("__AS3__.vec"),"Vector")<Qname(PackageNamespace(""),"Class")>)
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"_typeFilter")
         coerce_a
         dup
         iffalse ofs0013
         pop
         getlocal_0
         callproperty Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"throwSealedMatcherError") 0
         coerce_a
         ofs0013:pop
         getlocal_0
         getlocal_1
         getlocal_2
         callpropvoid Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"pushValuesToClassVector") 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function throwSealedMatcherError() : void
      {
         trait method Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"throwSealedMatcherError")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("flash.errors"),"IllegalOperationError")
         pushstring "This TypeMatcher has been sealed and can no longer be configured"
         constructprop Qname(PackageNamespace("flash.errors"),"IllegalOperationError") 1
         throw
         end ; code
         end ; body
         end ; method
      }
      
      protected function pushValuesToClassVector(param1:Array, param2:Vector.<Class>) : void
      {
         trait method Qname(ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),"pushValuesToClassVector")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         param TypeName(Qname(PackageNamespace("__AS3__.vec"),"Vector")<Qname(PackageNamespace(""),"Class")>)
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 6
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         pushnull
         coerce Qname(PackageNamespace(""),"Class")
         setlocal_3
         getlocal_1
         getproperty Qname(PackageNamespace(""),"length")
         pushbyte 1
         equals
         dup
         iffalse ofs0033
         pop
         getlocal_1
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"2023"),ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),PackageNamespace("robotlegs.bender.extensions.matching"),PackageNamespace(""),PrivateNamespace(null,"2024"),PackageInternalNs("robotlegs.bender.extensions.matching"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
         getlex Qname(PackageNamespace(""),"Array")
         istypelate
         dup
         iftrue ofs0033
         pop
         getlocal_1
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"2023"),ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),PackageNamespace("robotlegs.bender.extensions.matching"),PackageNamespace(""),PrivateNamespace(null,"2024"),PackageInternalNs("robotlegs.bender.extensions.matching"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
         getlex Multiname("Vector",[PrivateNamespace(null,"2023"),ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),PackageNamespace("robotlegs.bender.extensions.matching"),PackageNamespace(""),PackageNamespace("__AS3__.vec"),PrivateNamespace(null,"2024"),PackageInternalNs("robotlegs.bender.extensions.matching"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
         getlex Qname(PackageNamespace(""),"Class")
         applytype 1
         istypelate
         ofs0033:iffalse ofs0068
         pushbyte 0
         setlocal 4
         getlocal_1
         pushbyte 0
         getproperty MultinameL([PrivateNamespace(null,"2023"),ProtectedNamespace("robotlegs.bender.extensions.matching:TypeMatcher"),PackageNamespace("robotlegs.bender.extensions.matching"),PackageNamespace(""),PrivateNamespace(null,"2024"),PackageInternalNs("robotlegs.bender.extensions.matching"),Namespace("http://adobe.com/AS3/2006/builtin"),StaticProtectedNs("robotlegs.bender.extensions.matching:TypeMatcher")])
         coerce_a
         setlocal 5
         jump ofs0059
         ofs0049:label
         getlocal 5
         getlocal 4
         nextvalue
         coerce Qname(PackageNamespace(""),"Class")
         setlocal_3
         getlocal_2
         getlocal_3
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"push") 1
         ofs0059:hasnext2 5 4
         iftrue ofs0049
         kill 5
         kill 4
         jump ofs008f
         ofs0068:pushbyte 0
         setlocal 4
         getlocal_1
         coerce_a
         setlocal 5
         jump ofs0084
         ofs0074:label
         getlocal 5
         getlocal 4
         nextvalue
         coerce Qname(PackageNamespace(""),"Class")
         setlocal_3
         getlocal_2
         getlocal_3
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"push") 1
         ofs0084:hasnext2 5 4
         iftrue ofs0074
         kill 5
         kill 4
         ofs008f:returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
