package robotlegs.bender.framework.impl
{
   import robotlegs.bender.framework.api.MappingConfigError;
   
   public class MappingConfigValidator
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private const CANT_CHANGE_GUARDS_AND_HOOKS:String = "You can\'t change the guards and hooks on an existing mapping. Unmap first.";
      
      private const STORED_ERROR_EXPLANATION:String = " The stacktrace for this error was stored at the time when you duplicated the mapping - you may have failed to add guards and hooks that were already present.";
      
      private var _guards:Array;
      
      private var _hooks:Array;
      
      private var _trigger;
      
      private var _action;
      
      private var _storedError:MappingConfigError;
      
      private var _valid:Boolean = false;
      
      public function MappingConfigValidator(param1:Array, param2:Array, param3:*, param4:*)
      {
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         param Qname(PackageNamespace(""),"Array")
         param null
         param null
         returns null
         
         body
         maxstack 2
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"1198"),"_guards")
         getlocal_0
         getlocal_2
         initproperty Qname(PrivateNamespace(null,"1198"),"_hooks")
         getlocal_0
         getlocal_3
         initproperty Qname(PrivateNamespace(null,"1198"),"_trigger")
         getlocal_0
         getlocal 4
         initproperty Qname(PrivateNamespace(null,"1198"),"_action")
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get valid() : Boolean
      {
         trait getter Qname(PackageNamespace(""),"valid")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_valid")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidate() : void
      {
         trait method Qname(PackageNamespace(""),"invalidate")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         pushfalse
         initproperty Qname(PrivateNamespace(null,"1198"),"_valid")
         getlocal_0
         findpropstrict Qname(PackageNamespace("robotlegs.bender.framework.api"),"MappingConfigError")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"CANT_CHANGE_GUARDS_AND_HOOKS")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"STORED_ERROR_EXPLANATION")
         add
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_trigger")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_action")
         constructprop Qname(PackageNamespace("robotlegs.bender.framework.api"),"MappingConfigError") 3
         initproperty Qname(PrivateNamespace(null,"1198"),"_storedError")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validate(param1:Array, param2:Array) : void
      {
         trait method Qname(PackageNamespace(""),"validate")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         param Qname(PackageNamespace(""),"Array")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_guards")
         getlocal_1
         callproperty Qname(PrivateNamespace(null,"1198"),"arraysMatch") 2
         not
         dup
         iftrue ofs0022
         pop
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_hooks")
         getlocal_2
         callproperty Qname(PrivateNamespace(null,"1198"),"arraysMatch") 2
         not
         ofs0022:iffalse ofs003b
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"1198"),"throwStoredError") 0
         coerce_a
         dup
         iftrue ofs003a
         pop
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"1198"),"throwMappingError") 0
         coerce_a
         ofs003a:pop
         ofs003b:getlocal_0
         pushtrue
         initproperty Qname(PrivateNamespace(null,"1198"),"_valid")
         getlocal_0
         pushnull
         initproperty Qname(PrivateNamespace(null,"1198"),"_storedError")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function checkGuards(param1:Array) : void
      {
         trait method Qname(PackageNamespace(""),"checkGuards")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_guards")
         getlocal_1
         callproperty Qname(PrivateNamespace(null,"1198"),"changesContent") 2
         iffalse ofs0018
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"1198"),"throwMappingError") 0
         ofs0018:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function checkHooks(param1:Array) : void
      {
         trait method Qname(PackageNamespace(""),"checkHooks")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_hooks")
         getlocal_1
         callproperty Qname(PrivateNamespace(null,"1198"),"changesContent") 2
         iffalse ofs0018
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"1198"),"throwMappingError") 0
         ofs0018:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function changesContent(param1:Array, param2:Array) : Boolean
      {
         trait method Qname(PrivateNamespace(null,"1198"),"changesContent")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         param Qname(PackageNamespace(""),"Array")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 6
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         pushundefined
         coerce_a
         setlocal_3
         getlocal_0
         getlocal_2
         callproperty Qname(PackageNamespace(""),"flatten") 1
         coerce Qname(PackageNamespace(""),"Array")
         setlocal_2
         pushbyte 0
         setlocal 4
         getlocal_2
         coerce_a
         setlocal 5
         jump ofs0032
         ofs001b:label
         getlocal 5
         getlocal 4
         nextvalue
         coerce_a
         setlocal_3
         getlocal_1
         getlocal_3
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"indexOf") 1
         pushbyte -1
         ifne ofs0032
         pushtrue
         returnvalue
         ofs0032:hasnext2 5 4
         iftrue ofs001b
         kill 5
         kill 4
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function arraysMatch(param1:Array, param2:Array) : Boolean
      {
         trait method Qname(PrivateNamespace(null,"1198"),"arraysMatch")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         param Qname(PackageNamespace(""),"Array")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 6
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         pushbyte 0
         setlocal_3
         getlocal_1
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"slice") 0
         coerce Qname(PackageNamespace(""),"Array")
         setlocal_1
         getlocal_1
         getproperty Qname(PackageNamespace(""),"length")
         getlocal_2
         getproperty Qname(PackageNamespace(""),"length")
         ifeq ofs001c
         pushfalse
         returnvalue
         ofs001c:getlocal_2
         getproperty Qname(PackageNamespace(""),"length")
         convert_u
         setlocal 4
         pushbyte 0
         convert_u
         setlocal 5
         jump ofs0054
         ofs002c:label
         getlocal_1
         getlocal_2
         getlocal 5
         getproperty MultinameL([PrivateNamespace(null,"1198"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"2120"),PackageNamespace("robotlegs.bender.framework.impl"),PackageInternalNs("robotlegs.bender.framework.impl"),ProtectedNamespace("robotlegs.bender.framework.impl:MappingConfigValidator"),StaticProtectedNs("robotlegs.bender.framework.impl:MappingConfigValidator")])
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"indexOf") 1
         convert_i
         setlocal_3
         getlocal_3
         pushbyte -1
         ifne ofs0045
         pushfalse
         returnvalue
         ofs0045:getlocal_1
         getlocal_3
         pushbyte 1
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"splice") 2
         getlocal 5
         increment
         convert_u
         setlocal 5
         ofs0054:getlocal 5
         getlocal 4
         iflt ofs002c
         pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function flatten(param1:Array) : Array
      {
         trait method Qname(PackageNamespace(""),"flatten")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Array")
         returns Qname(PackageNamespace(""),"Array")
         
         body
         maxstack 4
         localcount 6
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         pushundefined
         coerce_a
         setlocal_3
         newarray 0
         coerce Qname(PackageNamespace(""),"Array")
         setlocal_2
         pushbyte 0
         setlocal 4
         getlocal_1
         coerce_a
         setlocal 5
         jump ofs0044
         ofs0016:label
         getlocal 5
         getlocal 4
         nextvalue
         coerce_a
         setlocal_3
         getlocal_3
         getlex Qname(PackageNamespace(""),"Array")
         istypelate
         iffalse ofs003d
         getlocal_2
         getlocal_0
         getlocal_3
         getlex Qname(PackageNamespace(""),"Array")
         astypelate
         callproperty Qname(PackageNamespace(""),"flatten") 1
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"concat") 1
         coerce Qname(PackageNamespace(""),"Array")
         setlocal_2
         jump ofs0044
         ofs003d:getlocal_2
         getlocal_3
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"push") 1
         ofs0044:hasnext2 5 4
         iftrue ofs0016
         kill 5
         kill 4
         getlocal_2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function throwMappingError() : void
      {
         trait method Qname(PrivateNamespace(null,"1198"),"throwMappingError")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("robotlegs.bender.framework.api"),"MappingConfigError")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"CANT_CHANGE_GUARDS_AND_HOOKS")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_trigger")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_action")
         constructprop Qname(PackageNamespace("robotlegs.bender.framework.api"),"MappingConfigError") 3
         throw
         end ; code
         end ; body
         end ; method
      }
      
      private function throwStoredError() : Boolean
      {
         trait method Qname(PrivateNamespace(null,"1198"),"throwStoredError")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_storedError")
         iffalse ofs0011
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1198"),"_storedError")
         throw
         ofs0011:pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
