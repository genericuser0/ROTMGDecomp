package kabam.rotmg.core.commands
{
   import com.company.assembleegameclient.screens.LoadingScreen;
   import flash.display.Sprite;
   import io.decagames.rotmg.pets.tasks.GetOwnedPetSkinsTask;
   import io.decagames.rotmg.seasonalEvent.data.SeasonalEventModel;
   import io.decagames.rotmg.seasonalEvent.tasks.GetLegacySeasonsTask;
   import io.decagames.rotmg.seasonalEvent.tasks.GetSeasonalEventTask;
   import io.decagames.rotmg.supportCampaign.tasks.GetCampaignStatusTask;
   import kabam.lib.tasks.DispatchSignalTask;
   import kabam.lib.tasks.TaskMonitor;
   import kabam.lib.tasks.TaskSequence;
   import kabam.rotmg.account.core.services.GetCharListTask;
   import kabam.rotmg.core.model.PlayerModel;
   import kabam.rotmg.core.signals.SetScreenSignal;
   import kabam.rotmg.dailyLogin.tasks.FetchPlayerCalendarTask;
   
   public class SetScreenWithValidDataCommand
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Inject]
      public var model:PlayerModel;
      
      [Inject]
      public var setScreen:SetScreenSignal;
      
      [Inject]
      public var view:Sprite;
      
      [Inject]
      public var monitor:TaskMonitor;
      
      [Inject]
      public var task:GetCharListTask;
      
      [Inject]
      public var calendarTask:FetchPlayerCalendarTask;
      
      [Inject]
      public var campaignStatusTask:GetCampaignStatusTask;
      
      [Inject]
      public var petSkinsTask:GetOwnedPetSkinsTask;
      
      [Inject]
      public var getSeasonalEventTask:GetSeasonalEventTask;
      
      [Inject]
      public var getLegacySeasonsTask:GetLegacySeasonsTask;
      
      [Inject]
      public var seasonalEventModel:SeasonalEventModel;
      
      public function SetScreenWithValidDataCommand()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function execute() : void
      {
         trait method Qname(PackageNamespace(""),"execute")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"model")
         getproperty Qname(PackageNamespace(""),"isInvalidated")
         iffalse ofs0016
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"506"),"reloadDataThenSetScreen") 0
         jump ofs0022
         ofs0016:getlocal_0
         getproperty Qname(PackageNamespace(""),"setScreen")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"view")
         callpropvoid Qname(PackageNamespace(""),"dispatch") 1
         ofs0022:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function reloadDataThenSetScreen() : void
      {
         trait method Qname(PrivateNamespace(null,"506"),"reloadDataThenSetScreen")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"setScreen")
         findpropstrict Qname(PackageNamespace("com.company.assembleegameclient.screens"),"LoadingScreen")
         constructprop Qname(PackageNamespace("com.company.assembleegameclient.screens"),"LoadingScreen") 0
         callpropvoid Qname(PackageNamespace(""),"dispatch") 1
         findpropstrict Qname(PackageNamespace("kabam.lib.tasks"),"TaskSequence")
         constructprop Qname(PackageNamespace("kabam.lib.tasks"),"TaskSequence") 0
         coerce Qname(PackageNamespace("kabam.lib.tasks"),"TaskSequence")
         setlocal_1
         getlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"task")
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"calendarTask")
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"petSkinsTask")
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"campaignStatusTask")
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"seasonalEventModel")
         getproperty Qname(PackageNamespace(""),"isChallenger")
         iftrue ofs0054
         getlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"getSeasonalEventTask")
         callpropvoid Qname(PackageNamespace(""),"add") 1
         ofs0054:getlocal_1
         findpropstrict Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"setScreen")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"view")
         constructprop Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask") 2
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"monitor")
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"start") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
