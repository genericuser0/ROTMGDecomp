package kabam.rotmg.startup.control
{
   import kabam.lib.tasks.BaseTask;
   import kabam.lib.tasks.Task;
   import kabam.rotmg.startup.model.api.StartupDelegate;
   import kabam.rotmg.startup.model.impl.SignalTaskDelegate;
   import kabam.rotmg.startup.model.impl.TaskDelegate;
   import org.swiftsuspenders.Injector;
   import robotlegs.bender.framework.api.ILogger;
   
   public class StartupSequence extends BaseTask
   {
      
      public static const LAST:int = 2147483647;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PackageNamespace(""),"LAST")
         getlex Qname(PackageNamespace(""),"int")
         getproperty Qname(PackageNamespace(""),"MAX_VALUE")
         initproperty Qname(PackageNamespace(""),"LAST")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Inject]
      public var injector:Injector;
      
      [Inject]
      public var logger:ILogger;
      
      private const list:Vector.<StartupDelegate>;
      
      private var index:int = 0;
      
      public function StartupSequence()
      {
         method
         name null
         returns null
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         findpropstrict Multiname("Vector",[PackageNamespace("__AS3__.vec")])
         getproperty Multiname("Vector",[PrivateNamespace(null,"57"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"1318"),PackageNamespace("kabam.rotmg.startup.control"),PackageInternalNs("kabam.rotmg.startup.control"),ProtectedNamespace("kabam.rotmg.startup.control:StartupSequence"),StaticProtectedNs("kabam.rotmg.startup.control:StartupSequence"),StaticProtectedNs("kabam.lib.tasks:BaseTask"),PackageNamespace("__AS3__.vec")])
         getlex Qname(PackageNamespace("kabam.rotmg.startup.model.api"),"StartupDelegate")
         applytype 1
         pushbyte 0
         construct 1
         initproperty Qname(PrivateNamespace(null,"57"),"list")
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function addSignal(param1:Class, param2:int = 0) : void
      {
         trait method Qname(PackageNamespace(""),"addSignal")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace(""),"Class")
         param Qname(PackageNamespace(""),"int")
         optional 0
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("kabam.rotmg.startup.model.impl"),"SignalTaskDelegate")
         constructprop Qname(PackageNamespace("kabam.rotmg.startup.model.impl"),"SignalTaskDelegate") 0
         coerce Qname(PackageNamespace("kabam.rotmg.startup.model.impl"),"SignalTaskDelegate")
         setlocal_3
         getlocal_3
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         setproperty Qname(PackageNamespace(""),"injector")
         getlocal_3
         getlocal_1
         setproperty Qname(PackageNamespace(""),"signalClass")
         getlocal_3
         getlocal_2
         setproperty Qname(PackageNamespace(""),"priority")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"list")
         getlocal_3
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"push") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function addTask(param1:Class, param2:int = 0) : void
      {
         trait method Qname(PackageNamespace(""),"addTask")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace(""),"Class")
         param Qname(PackageNamespace(""),"int")
         optional 0
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("kabam.rotmg.startup.model.impl"),"TaskDelegate")
         constructprop Qname(PackageNamespace("kabam.rotmg.startup.model.impl"),"TaskDelegate") 0
         coerce Qname(PackageNamespace("kabam.rotmg.startup.model.impl"),"TaskDelegate")
         setlocal_3
         getlocal_3
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         setproperty Qname(PackageNamespace(""),"injector")
         getlocal_3
         getlocal_1
         setproperty Qname(PackageNamespace(""),"taskClass")
         getlocal_3
         getlocal_2
         setproperty Qname(PackageNamespace(""),"priority")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"list")
         getlocal_3
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"push") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function startTask() : void
      {
         trait method Qname(ProtectedNamespace("kabam.rotmg.startup.control:StartupSequence"),"startTask")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"list")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"priorityComparison")
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"sort") 1
         getlocal_0
         pushbyte 0
         initproperty Qname(PrivateNamespace(null,"57"),"index")
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"57"),"doNextTaskOrComplete") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function priorityComparison(param1:StartupDelegate, param2:StartupDelegate) : int
      {
         trait method Qname(PrivateNamespace(null,"57"),"priorityComparison")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("kabam.rotmg.startup.model.api"),"StartupDelegate")
         param Qname(PackageNamespace("kabam.rotmg.startup.model.api"),"StartupDelegate")
         returns Qname(PackageNamespace(""),"int")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_1
         callproperty Qname(Namespace("kabam.rotmg.startup.model.api:StartupDelegate"),"getPriority") 0
         getlocal_2
         callproperty Qname(Namespace("kabam.rotmg.startup.model.api:StartupDelegate"),"getPriority") 0
         subtract
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function doNextTaskOrComplete() : void
      {
         trait method Qname(PrivateNamespace(null,"57"),"doNextTaskOrComplete")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"57"),"isAnotherTask") 0
         iffalse ofs0014
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"57"),"doNextTask") 0
         jump ofs001c
         ofs0014:findpropstrict Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask")
         pushtrue
         callpropvoid Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask") 1
         ofs001c:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function isAnotherTask() : Boolean
      {
         trait method Qname(PrivateNamespace(null,"57"),"isAnotherTask")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"index")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"list")
         getproperty Qname(PackageNamespace(""),"length")
         lessthan
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function doNextTask() : void
      {
         trait method Qname(PrivateNamespace(null,"57"),"doNextTask")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"list")
         getlocal_0
         dup
         setlocal_2
         getproperty Qname(PrivateNamespace(null,"57"),"index")
         dup
         increment_i
         setlocal_3
         getlocal_2
         getlocal_3
         setproperty Qname(PrivateNamespace(null,"57"),"index")
         kill 3
         kill 2
         getproperty MultinameL([PrivateNamespace(null,"57"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"1318"),PackageNamespace("kabam.rotmg.startup.control"),PackageInternalNs("kabam.rotmg.startup.control"),ProtectedNamespace("kabam.rotmg.startup.control:StartupSequence"),StaticProtectedNs("kabam.rotmg.startup.control:StartupSequence"),StaticProtectedNs("kabam.lib.tasks:BaseTask")])
         callproperty Qname(Namespace("kabam.rotmg.startup.model.api:StartupDelegate"),"make") 0
         coerce Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         setlocal_1
         getlocal_1
         getproperty Qname(Namespace("kabam.lib.tasks:Task"),"lastly")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"57"),"onTaskFinished")
         callpropvoid Qname(PackageNamespace(""),"addOnce") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"logger")
         pushstring "StartupSequence start:{0}"
         getlocal_1
         newarray 1
         callpropvoid Qname(Namespace("robotlegs.bender.framework.api:ILogger"),"info") 2
         getlocal_1
         callpropvoid Qname(Namespace("kabam.lib.tasks:Task"),"start") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function onTaskFinished(param1:Task, param2:Boolean, param3:String) : void
      {
         trait method Qname(PrivateNamespace(null,"57"),"onTaskFinished")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         param Qname(PackageNamespace(""),"Boolean")
         param Qname(PackageNamespace(""),"String")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"logger")
         pushstring "StartupSequence finish:{0} (isOK: {1})"
         getlocal_1
         getlocal_2
         newarray 2
         callpropvoid Qname(Namespace("robotlegs.bender.framework.api:ILogger"),"info") 2
         getlocal_2
         iffalse ofs0020
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"57"),"doNextTaskOrComplete") 0
         jump ofs0029
         ofs0020:findpropstrict Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask")
         pushfalse
         getlocal_3
         callpropvoid Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask") 2
         ofs0029:returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
