package kabam.rotmg.classes
{
   import kabam.rotmg.account.core.control.IsAccountRegisteredToBuyGoldGuard;
   import kabam.rotmg.account.core.signals.CharListDataSignal;
   import kabam.rotmg.account.core.signals.LogoutSignal;
   import kabam.rotmg.assets.EmbeddedData;
   import kabam.rotmg.classes.control.BuyCharacterSkinCommand;
   import kabam.rotmg.classes.control.BuyCharacterSkinSignal;
   import kabam.rotmg.classes.control.FocusCharacterSkinSignal;
   import kabam.rotmg.classes.control.ParseCharListXmlCommand;
   import kabam.rotmg.classes.control.ParseClassesXMLSignal;
   import kabam.rotmg.classes.control.ParseClassesXmlCommand;
   import kabam.rotmg.classes.control.ParseSkinsXmlCommand;
   import kabam.rotmg.classes.control.ResetClassDataCommand;
   import kabam.rotmg.classes.model.ClassesModel;
   import kabam.rotmg.classes.services.BuySkinTask;
   import kabam.rotmg.classes.view.CharacterSkinListItem;
   import kabam.rotmg.classes.view.CharacterSkinListItemFactory;
   import kabam.rotmg.classes.view.CharacterSkinListItemMediator;
   import kabam.rotmg.classes.view.CharacterSkinListMediator;
   import kabam.rotmg.classes.view.CharacterSkinListView;
   import kabam.rotmg.classes.view.CharacterSkinMediator;
   import kabam.rotmg.classes.view.CharacterSkinView;
   import kabam.rotmg.classes.view.ClassDetailMediator;
   import kabam.rotmg.classes.view.ClassDetailView;
   import org.swiftsuspenders.Injector;
   import robotlegs.bender.extensions.mediatorMap.api.IMediatorMap;
   import robotlegs.bender.extensions.signalCommandMap.api.ISignalCommandMap;
   import robotlegs.bender.framework.api.IConfig;
   import robotlegs.bender.framework.api.IContext;
   
   public class ClassesConfig implements IConfig
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Inject]
      public var context:IContext;
      
      [Inject]
      public var injector:Injector;
      
      [Inject]
      public var mediatorMap:IMediatorMap;
      
      [Inject]
      public var commandMap:ISignalCommandMap;
      
      public function ClassesConfig()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function configure() : void
      {
         trait method Qname(PackageNamespace(""),"configure")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.model"),"ClassesModel")
         callproperty Qname(PackageNamespace(""),"map") 1
         callpropvoid Qname(PackageNamespace(""),"asSingleton") 0
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"CharacterSkinListItemFactory")
         callproperty Qname(PackageNamespace(""),"map") 1
         callpropvoid Qname(PackageNamespace(""),"asSingleton") 0
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"FocusCharacterSkinSignal")
         callproperty Qname(PackageNamespace(""),"map") 1
         callpropvoid Qname(PackageNamespace(""),"asSingleton") 0
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.services"),"BuySkinTask")
         callpropvoid Qname(PackageNamespace(""),"map") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"mediatorMap")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"CharacterSkinListItem")
         callproperty Qname(Namespace("robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"CharacterSkinListItemMediator")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper"),"toMediator") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"mediatorMap")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"CharacterSkinListView")
         callproperty Qname(Namespace("robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"CharacterSkinListMediator")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper"),"toMediator") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"mediatorMap")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"CharacterSkinView")
         callproperty Qname(Namespace("robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"CharacterSkinMediator")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper"),"toMediator") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"mediatorMap")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"ClassDetailView")
         callproperty Qname(Namespace("robotlegs.bender.extensions.mediatorMap.api:IMediatorMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.view"),"ClassDetailMediator")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.mediatorMap.dsl:IMediatorMapper"),"toMediator") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"commandMap")
         getlex Qname(PackageNamespace("kabam.rotmg.account.core.signals"),"LogoutSignal")
         callproperty Qname(Namespace("robotlegs.bender.extensions.signalCommandMap.api:ISignalCommandMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"ResetClassDataCommand")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper"),"toCommand") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"commandMap")
         getlex Qname(PackageNamespace("kabam.rotmg.account.core.signals"),"CharListDataSignal")
         callproperty Qname(Namespace("robotlegs.bender.extensions.signalCommandMap.api:ISignalCommandMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"ParseCharListXmlCommand")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper"),"toCommand") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"commandMap")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"ParseClassesXMLSignal")
         callproperty Qname(Namespace("robotlegs.bender.extensions.signalCommandMap.api:ISignalCommandMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"ParseClassesXmlCommand")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper"),"toCommand") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"commandMap")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"ParseClassesXMLSignal")
         callproperty Qname(Namespace("robotlegs.bender.extensions.signalCommandMap.api:ISignalCommandMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"ParseSkinsXmlCommand")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper"),"toCommand") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"commandMap")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"BuyCharacterSkinSignal")
         callproperty Qname(Namespace("robotlegs.bender.extensions.signalCommandMap.api:ISignalCommandMap"),"map") 1
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"BuyCharacterSkinCommand")
         callproperty Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMapper"),"toCommand") 1
         getlex Qname(PackageNamespace("kabam.rotmg.account.core.control"),"IsAccountRegisteredToBuyGoldGuard")
         callpropvoid Qname(Namespace("robotlegs.bender.extensions.commandCenter.dsl:ICommandMappingConfig"),"withGuards") 1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"context")
         getproperty Qname(Namespace("robotlegs.bender.framework.api:IContext"),"lifecycle")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"20"),"init")
         callpropvoid Qname(Namespace("robotlegs.bender.framework.api:ILifecycle"),"afterInitializing") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function init() : void
      {
         trait method Qname(PrivateNamespace(null,"20"),"init")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace(""),"XML")
         getlex Qname(PackageNamespace("kabam.rotmg.assets"),"EmbeddedData")
         constructprop Qname(PackageNamespace(""),"PlayersCXML") 0
         callproperty Qname(PackageNamespace(""),"XML") 1
         coerce Qname(PackageNamespace(""),"XML")
         setlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"injector")
         getlex Qname(PackageNamespace("kabam.rotmg.classes.control"),"ParseClassesXMLSignal")
         callproperty Qname(PackageNamespace(""),"getInstance") 1
         coerce Qname(PackageNamespace("kabam.rotmg.classes.control"),"ParseClassesXMLSignal")
         setlocal_2
         getlocal_2
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"dispatch") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
