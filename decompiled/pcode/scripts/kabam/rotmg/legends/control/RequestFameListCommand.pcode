package kabam.rotmg.legends.control
{
   import kabam.lib.tasks.BranchingTask;
   import kabam.lib.tasks.DispatchSignalTask;
   import kabam.lib.tasks.Task;
   import kabam.lib.tasks.TaskMonitor;
   import kabam.rotmg.core.model.PlayerModel;
   import kabam.rotmg.core.signals.TaskErrorSignal;
   import kabam.rotmg.death.model.DeathModel;
   import kabam.rotmg.fame.model.FameModel;
   import kabam.rotmg.legends.service.GetLegendsListTask;
   
   public class RequestFameListCommand
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Inject]
      public var task:GetLegendsListTask;
      
      [Inject]
      public var update:FameListUpdateSignal;
      
      [Inject]
      public var error:TaskErrorSignal;
      
      [Inject]
      public var monitor:TaskMonitor;
      
      [Inject]
      public var player:PlayerModel;
      
      [Inject]
      public var death:DeathModel;
      
      [Inject]
      public var model:FameModel;
      
      public function RequestFameListCommand()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function execute() : void
      {
         trait method Qname(PackageNamespace(""),"execute")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"task")
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"80"),"getCharId") 0
         setproperty Qname(PackageNamespace(""),"charId")
         findpropstrict Qname(PackageNamespace("kabam.lib.tasks"),"BranchingTask")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"task")
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"80"),"makeSuccess") 0
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"80"),"makeFailure") 0
         constructprop Qname(PackageNamespace("kabam.lib.tasks"),"BranchingTask") 3
         coerce Qname(PackageNamespace("kabam.lib.tasks"),"BranchingTask")
         setlocal_1
         getlocal_0
         getproperty Qname(PackageNamespace(""),"monitor")
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"add") 1
         getlocal_1
         callpropvoid Qname(PackageNamespace(""),"start") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function getCharId() : int
      {
         trait method Qname(PrivateNamespace(null,"80"),"getCharId")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"int")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PackageNamespace(""),"player")
         callproperty Qname(PackageNamespace(""),"hasAccount") 0
         convert_b
         dup
         iffalse ofs001a
         pop
         getlocal_0
         getproperty Qname(PackageNamespace(""),"death")
         callproperty Qname(PackageNamespace(""),"getIsDeathViewPending") 0
         convert_b
         ofs001a:iffalse ofs002a
         getlocal_0
         getproperty Qname(PackageNamespace(""),"death")
         callproperty Qname(PackageNamespace(""),"getLastDeath") 0
         getproperty Qname(PackageNamespace(""),"charId_")
         returnvalue
         ofs002a:pushbyte -1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function makeSuccess() : Task
      {
         trait method Qname(PrivateNamespace(null,"80"),"makeSuccess")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"update")
         constructprop Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask") 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function makeFailure() : Task
      {
         trait method Qname(PrivateNamespace(null,"80"),"makeFailure")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"error")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"task")
         constructprop Qname(PackageNamespace("kabam.lib.tasks"),"DispatchSignalTask") 2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
