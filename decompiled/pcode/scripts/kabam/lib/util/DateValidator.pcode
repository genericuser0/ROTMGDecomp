package kabam.lib.util
{
   public class DateValidator
   {
      
      private static const DAYS_IN_MONTH:Vector.<int>;
      
      private static const FEBRUARY:int = 2;
      
      {
         method
         name null
         returns null
         
         body
         maxstack 15
         localcount 1
         initscopedepth 3
         maxscopedepth 4
         
         code
         getlocal_0
         pushscope
         findproperty Qname(PrivateNamespace(null,"976"),"DAYS_IN_MONTH")
         getlex Multiname("Vector",[PrivateNamespace(null,"976"),PrivateNamespace(null,"1921"),PackageNamespace(""),PackageNamespace("kabam.lib.util"),PackageInternalNs("kabam.lib.util"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("kabam.lib.util:DateValidator"),StaticProtectedNs("kabam.lib.util:DateValidator"),PackageNamespace("__AS3__.vec")])
         getlex Qname(PackageNamespace(""),"int")
         applytype 1
         getglobalscope
         pushbyte 31
         pushbyte -1
         pushbyte 31
         pushbyte 30
         pushbyte 31
         pushbyte 30
         pushbyte 31
         dup
         pushbyte 30
         pushbyte 31
         pushbyte 30
         pushbyte 31
         newarray 12
         call 1
         initproperty Qname(PrivateNamespace(null,"976"),"DAYS_IN_MONTH")
         findproperty Qname(PrivateNamespace(null,"976"),"FEBRUARY")
         pushbyte 2
         initproperty Qname(PrivateNamespace(null,"976"),"FEBRUARY")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var thisYear:int;
      
      public function DateValidator()
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         findpropstrict Qname(PackageNamespace(""),"Date")
         constructprop Qname(PackageNamespace(""),"Date") 0
         callproperty Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"getFullYear") 0
         initproperty Qname(PrivateNamespace(null,"976"),"thisYear")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function isValidMonth(param1:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"isValidMonth")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_1
         pushbyte 0
         greaterthan
         dup
         iffalse ofs0010
         pop
         getlocal_1
         pushbyte 12
         lessequals
         ofs0010:returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function isValidDay(param1:int, param2:int = -1, param3:int = -1) : Boolean
      {
         trait method Qname(PackageNamespace(""),"isValidDay")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         optional -1
         optional -1
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_1
         pushbyte 0
         greaterthan
         dup
         iffalse ofs0015
         pop
         getlocal_1
         getlocal_0
         getlocal_2
         getlocal_3
         callproperty Qname(PackageNamespace(""),"getDaysInMonth") 2
         lessequals
         ofs0015:returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getDaysInMonth(param1:int = -1, param2:int = -1) : int
      {
         trait method Qname(PackageNamespace(""),"getDaysInMonth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         optional -1
         optional -1
         returns Qname(PackageNamespace(""),"int")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_1
         pushbyte -1
         ifne ofs000c
         pushbyte 31
         returnvalue
         ofs000c:getlocal_1
         getlex Qname(PrivateNamespace(null,"976"),"FEBRUARY")
         equals
         iffalse ofs0021
         getlocal_0
         getlocal_2
         callproperty Qname(PrivateNamespace(null,"976"),"getDaysInFebruary") 1
         convert_i
         jump ofs002c
         ofs0021:getlex Qname(PrivateNamespace(null,"976"),"DAYS_IN_MONTH")
         getlocal_1
         decrement
         getproperty MultinameL([PrivateNamespace(null,"976"),PrivateNamespace(null,"1921"),PackageNamespace(""),PackageNamespace("kabam.lib.util"),PackageInternalNs("kabam.lib.util"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("kabam.lib.util:DateValidator"),StaticProtectedNs("kabam.lib.util:DateValidator")])
         convert_i
         ofs002c:returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function getDaysInFebruary(param1:int) : int
      {
         trait method Qname(PrivateNamespace(null,"976"),"getDaysInFebruary")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"int")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_1
         pushbyte -1
         equals
         dup
         iftrue ofs0013
         pop
         getlocal_0
         getlocal_1
         callproperty Qname(PackageNamespace(""),"isLeapYear") 1
         convert_b
         ofs0013:iffalse ofs001a
         pushbyte 29
         returnvalue
         ofs001a:pushbyte 28
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function isLeapYear(param1:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"isLeapYear")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_1
         pushbyte 4
         modulo
         pushbyte 0
         equals
         setlocal_2
         getlocal_1
         pushbyte 100
         modulo
         pushbyte 0
         equals
         setlocal_3
         getlocal_1
         pushshort 400
         modulo
         pushbyte 0
         equals
         setlocal 4
         getlocal_2
         convert_b
         dup
         iffalse ofs002f
         pop
         getlocal_3
         not
         dup
         iftrue ofs002f
         pop
         getlocal 4
         convert_b
         ofs002f:returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function isValidDate(param1:int, param2:int, param3:int, param4:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"isValidDate")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 4
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_3
         getlocal 4
         callproperty Qname(PackageNamespace(""),"isValidYear") 2
         convert_b
         dup
         iffalse ofs0018
         pop
         getlocal_0
         getlocal_1
         callproperty Qname(PackageNamespace(""),"isValidMonth") 1
         convert_b
         ofs0018:dup
         iffalse ofs0027
         pop
         getlocal_0
         getlocal_2
         getlocal_1
         getlocal_3
         callproperty Qname(PackageNamespace(""),"isValidDay") 3
         convert_b
         ofs0027:returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function isValidYear(param1:int, param2:int) : Boolean
      {
         trait method Qname(PackageNamespace(""),"isValidYear")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"int")
         param Qname(PackageNamespace(""),"int")
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         getlocal_1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"976"),"thisYear")
         lessequals
         dup
         iffalse ofs0016
         pop
         getlocal_1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"976"),"thisYear")
         getlocal_2
         subtract
         greaterthan
         ofs0016:returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
