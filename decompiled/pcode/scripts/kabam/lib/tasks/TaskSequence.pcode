package kabam.lib.tasks
{
   public class TaskSequence extends BaseTask
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var tasks:Vector.<Task>;
      
      private var index:int;
      
      private var continueOnFail:Boolean;
      
      public function TaskSequence()
      {
         method
         name null
         returns null
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlex Multiname("Vector",[PrivateNamespace(null,"812"),PrivateNamespace(null,"1812"),PackageNamespace(""),PackageNamespace("kabam.lib.tasks"),PackageInternalNs("kabam.lib.tasks"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("kabam.lib.tasks:TaskSequence"),StaticProtectedNs("kabam.lib.tasks:TaskSequence"),StaticProtectedNs("kabam.lib.tasks:BaseTask"),PackageNamespace("__AS3__.vec")])
         getlex Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         applytype 1
         construct 0
         initproperty Qname(PrivateNamespace(null,"812"),"tasks")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getContinueOnFail() : Boolean
      {
         trait method Qname(PackageNamespace(""),"getContinueOnFail")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"continueOnFail")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setContinueOnFail(param1:Boolean) : void
      {
         trait method Qname(PackageNamespace(""),"setContinueOnFail")
         dispid 0
         method
         name null
         param Qname(PackageNamespace(""),"Boolean")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"812"),"continueOnFail")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function add(param1:Task) : void
      {
         trait method Qname(PackageNamespace(""),"add")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"tasks")
         getlocal_1
         callpropvoid Qname(Namespace("http://adobe.com/AS3/2006/builtin"),"push") 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function startTask() : void
      {
         trait method Qname(ProtectedNamespace("kabam.lib.tasks:TaskSequence"),"startTask")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         pushbyte 0
         initproperty Qname(PrivateNamespace(null,"812"),"index")
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"812"),"doNextTaskOrComplete") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function onReset() : void
      {
         trait method Qname(ProtectedNamespace("kabam.lib.tasks:TaskSequence"),"onReset")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         pushnull
         coerce Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         setlocal_1
         pushbyte 0
         setlocal_2
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"tasks")
         coerce_a
         setlocal_3
         jump ofs001f
         ofs0013:label
         getlocal_3
         getlocal_2
         nextvalue
         coerce Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         setlocal_1
         getlocal_1
         callpropvoid Qname(Namespace("kabam.lib.tasks:Task"),"reset") 0
         ofs001f:hasnext2 3 2
         iftrue ofs0013
         kill 3
         kill 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function doNextTaskOrComplete() : void
      {
         trait method Qname(PrivateNamespace(null,"812"),"doNextTaskOrComplete")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         callproperty Qname(PrivateNamespace(null,"812"),"isAnotherTask") 0
         iffalse ofs0014
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"812"),"doNextTask") 0
         jump ofs001c
         ofs0014:findpropstrict Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask")
         pushtrue
         callpropvoid Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask") 1
         ofs001c:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function isAnotherTask() : Boolean
      {
         trait method Qname(PrivateNamespace(null,"812"),"isAnotherTask")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"index")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"tasks")
         getproperty Qname(PackageNamespace(""),"length")
         lessthan
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function doNextTask() : void
      {
         trait method Qname(PrivateNamespace(null,"812"),"doNextTask")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"tasks")
         getlocal_0
         dup
         setlocal_2
         getproperty Qname(PrivateNamespace(null,"812"),"index")
         dup
         increment_i
         setlocal_3
         getlocal_2
         getlocal_3
         setproperty Qname(PrivateNamespace(null,"812"),"index")
         kill 3
         kill 2
         getproperty MultinameL([PrivateNamespace(null,"812"),PrivateNamespace(null,"1812"),PackageNamespace(""),PackageNamespace("kabam.lib.tasks"),PackageInternalNs("kabam.lib.tasks"),Namespace("http://adobe.com/AS3/2006/builtin"),ProtectedNamespace("kabam.lib.tasks:TaskSequence"),StaticProtectedNs("kabam.lib.tasks:TaskSequence"),StaticProtectedNs("kabam.lib.tasks:BaseTask")])
         coerce Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         setlocal_1
         getlocal_1
         getproperty Qname(Namespace("kabam.lib.tasks:Task"),"lastly")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"onTaskFinished")
         callpropvoid Qname(PackageNamespace(""),"addOnce") 1
         getlocal_1
         callpropvoid Qname(Namespace("kabam.lib.tasks:Task"),"start") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function onTaskFinished(param1:Task, param2:Boolean, param3:String) : void
      {
         trait method Qname(PrivateNamespace(null,"812"),"onTaskFinished")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         param Qname(PackageNamespace(""),"Boolean")
         param Qname(PackageNamespace(""),"String")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_2
         convert_b
         dup
         iftrue ofs000f
         pop
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"812"),"continueOnFail")
         convert_b
         ofs000f:iffalse ofs001c
         getlocal_0
         callpropvoid Qname(PrivateNamespace(null,"812"),"doNextTaskOrComplete") 0
         jump ofs0025
         ofs001c:findpropstrict Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask")
         pushfalse
         getlocal_3
         callpropvoid Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask") 2
         ofs0025:returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
