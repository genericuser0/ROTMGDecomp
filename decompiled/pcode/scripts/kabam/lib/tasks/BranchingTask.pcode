package kabam.lib.tasks
{
   public class BranchingTask extends BaseTask
   {
      
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal_0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private var task:Task;
      
      private var success:Task;
      
      private var failure:Task;
      
      public function BranchingTask(param1:Task, param2:Task = null, param3:Task = null)
      {
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         optional null
         optional null
         returns null
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         constructsuper 0
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"575"),"task")
         getlocal_0
         getlocal_2
         initproperty Qname(PrivateNamespace(null,"575"),"success")
         getlocal_0
         getlocal_3
         initproperty Qname(PrivateNamespace(null,"575"),"failure")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function addSuccessTask(param1:Task) : void
      {
         trait method Qname(PackageNamespace(""),"addSuccessTask")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"575"),"success")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function addFailureTask(param1:Task) : void
      {
         trait method Qname(PackageNamespace(""),"addFailureTask")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         initproperty Qname(PrivateNamespace(null,"575"),"failure")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function startTask() : void
      {
         trait method Qname(ProtectedNamespace("kabam.lib.tasks:BranchingTask"),"startTask")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"575"),"task")
         getproperty Qname(Namespace("kabam.lib.tasks:Task"),"finished")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"575"),"onTaskFinished")
         callpropvoid Qname(PackageNamespace(""),"addOnce") 1
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"575"),"task")
         callpropvoid Qname(Namespace("kabam.lib.tasks:Task"),"start") 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function onTaskFinished(param1:Task, param2:Boolean, param3:String = "") : void
      {
         trait method Qname(PrivateNamespace(null,"575"),"onTaskFinished")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         param Qname(PackageNamespace(""),"Boolean")
         param Qname(PackageNamespace(""),"String")
         optional ""
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_2
         iffalse ofs0014
         getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"575"),"success")
         callpropvoid Qname(PrivateNamespace(null,"575"),"handleBranchTask") 1
         jump ofs001d
         ofs0014:getlocal_0
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"575"),"failure")
         callpropvoid Qname(PrivateNamespace(null,"575"),"handleBranchTask") 1
         ofs001d:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function handleBranchTask(param1:Task) : void
      {
         trait method Qname(PrivateNamespace(null,"575"),"handleBranchTask")
         dispid 0
         method
         name null
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         getlocal_1
         iffalse ofs001c
         getlocal_1
         getproperty Qname(Namespace("kabam.lib.tasks:Task"),"finished")
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"575"),"onBranchComplete")
         callpropvoid Qname(PackageNamespace(""),"addOnce") 1
         getlocal_1
         callpropvoid Qname(Namespace("kabam.lib.tasks:Task"),"start") 0
         jump ofs0024
         ofs001c:findpropstrict Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask")
         pushtrue
         callpropvoid Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask") 1
         ofs0024:returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function onBranchComplete(param1:Task, param2:Boolean, param3:String = "") : void
      {
         trait method Qname(PrivateNamespace(null,"575"),"onBranchComplete")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace("kabam.lib.tasks"),"Task")
         param Qname(PackageNamespace(""),"Boolean")
         param Qname(PackageNamespace(""),"String")
         optional ""
         returns Qname(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask")
         getlocal_2
         getlocal_3
         callpropvoid Qname(ProtectedNamespace("kabam.lib.tasks:BaseTask"),"completeTask") 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}
