package mx.events
{
   import flash.events.Event;
   import flash.events.ProgressEvent;
   import mx.core.mx_internal;
   import mx.modules.IModuleInfo;
   
   use namespace mx_internal;
   
   public class ModuleEvent extends ProgressEvent
   {
      
      mx_internal static const VERSION:String = "4.6.0.23201";
      
      public static const ERROR:String = "error";
      
      public static const PROGRESS:String = "progress";
      
      public static const READY:String = "ready";
      
      public static const SETUP:String = "setup";
      
      public static const UNLOAD:String = "unload";
      
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal_0
         pushscope
         findproperty Qname(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         pushstring "4.6.0.23201"
         initproperty Qname(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
         findproperty Qname(PackageNamespace(""),"ERROR")
         pushstring "error"
         initproperty Qname(PackageNamespace(""),"ERROR")
         findproperty Qname(PackageNamespace(""),"PROGRESS")
         pushstring "progress"
         initproperty Qname(PackageNamespace(""),"PROGRESS")
         findproperty Qname(PackageNamespace(""),"READY")
         pushstring "ready"
         initproperty Qname(PackageNamespace(""),"READY")
         findproperty Qname(PackageNamespace(""),"SETUP")
         pushstring "setup"
         initproperty Qname(PackageNamespace(""),"SETUP")
         findproperty Qname(PackageNamespace(""),"UNLOAD")
         pushstring "unload"
         initproperty Qname(PackageNamespace(""),"UNLOAD")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public var errorText:String;
      
      private var _module:IModuleInfo;
      
      public function ModuleEvent(param1:String, param2:Boolean = false, param3:Boolean = false, param4:uint = 0, param5:uint = 0, param6:String = null, param7:IModuleInfo = null)
      {
         method
         name null
         flag HAS_OPTIONAL
         param Qname(PackageNamespace(""),"String")
         param Qname(PackageNamespace(""),"Boolean")
         param Qname(PackageNamespace(""),"Boolean")
         param Qname(PackageNamespace(""),"uint")
         param Qname(PackageNamespace(""),"uint")
         param Qname(PackageNamespace(""),"String")
         param Qname(PackageNamespace("mx.modules"),"IModuleInfo")
         optional false
         optional false
         optional 0
         optional 0
         optional null
         optional null
         returns null
         
         body
         maxstack 6
         localcount 8
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getlocal_1
         getlocal_2
         getlocal_3
         getlocal 4
         getlocal 5
         constructsuper 5
         getlocal_0
         getlocal 6
         initproperty Qname(PackageNamespace(""),"errorText")
         getlocal_0
         getlocal 7
         initproperty Qname(PrivateNamespace(null,"1178"),"_module")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get module() : IModuleInfo
      {
         trait getter Qname(PackageNamespace(""),"module")
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("mx.modules"),"IModuleInfo")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1178"),"_module")
         iffalse ofs000f
         getlocal_0
         getproperty Qname(PrivateNamespace(null,"1178"),"_module")
         returnvalue
         ofs000f:getlex Qname(PackageNamespace(""),"target")
         getlex Qname(PackageNamespace("mx.modules"),"IModuleInfo")
         astypelate
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override public function clone() : Event
      {
         trait method Qname(PackageNamespace(""),"clone")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns Qname(PackageNamespace("flash.events"),"Event")
         
         body
         maxstack 8
         localcount 1
         initscopedepth 6
         maxscopedepth 7
         
         code
         getlocal_0
         pushscope
         findpropstrict Qname(PackageNamespace("mx.events"),"ModuleEvent")
         getlex Qname(PackageNamespace(""),"type")
         getlex Qname(PackageNamespace(""),"bubbles")
         getlex Qname(PackageNamespace(""),"cancelable")
         getlex Qname(PackageNamespace(""),"bytesLoaded")
         getlex Qname(PackageNamespace(""),"bytesTotal")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"errorText")
         getlocal_0
         getproperty Qname(PackageNamespace(""),"module")
         constructprop Qname(PackageNamespace("mx.events"),"ModuleEvent") 7
         returnvalue
         end ; code
         end ; body
         end ; method
      }
   }
}
